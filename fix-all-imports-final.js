const fs = require('fs');
const path = require('path');

const appDir = path.join(__dirname, 'app');

// –ö–∞—Ä—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
const pathMappings = {
    // app/app/admin/* -> ../../../components/ui (3 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö)
    'app/app/admin/': '../../../components/',
    // app/app/* (–Ω–µ admin) -> ../../components/ui (2 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö)  
    'app/app/': '../../components/',
    // app/components/* -> ../components/ (1 —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
    'app/components/': '../components/',
    // app/hooks/* -> ../hooks/ (1 —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
    'app/hooks/': '../hooks/',
    // app/lib/* -> ../lib/ (1 —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
    'app/lib/': '../lib/',
};

function fixImportsInFile(filePath) {
    let content = fs.readFileSync(filePath, 'utf8');
    let changed = false;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    const relativePath = path.relative(__dirname, filePath);
    let basePath = '';
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    for (const [pattern, replacement] of Object.entries(pathMappings)) {
        if (relativePath.startsWith(pattern)) {
            basePath = replacement;
            break;
        }
    }
    
    if (!basePath) {
        return false; // –ù–µ –∑–Ω–∞–µ–º –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    const importPatterns = [
        // –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
        /from\s+['"]\.\.\/\.\.\/components\/ui['"]/g,
        /from\s+['"]\.\.\/\.\.\/\.\.\/components\/ui['"]/g,
        /from\s+['"]\.\.\/components\/ui['"]/g,
        
        // –ò–º–ø–æ—Ä—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
        /from\s+['"]\.\.\/\.\.\/components\/ui\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/\.\.\/\.\.\/components\/ui\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/components\/ui\/([^'"]+)['"]/g,
        
        // –ò–º–ø–æ—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        /from\s+['"]\.\.\/\.\.\/components\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/\.\.\/\.\.\/components\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/components\/([^'"]+)['"]/g,
        
        // –ò–º–ø–æ—Ä—Ç—ã —Ö—É–∫–æ–≤
        /from\s+['"]\.\.\/\.\.\/hooks\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/\.\.\/\.\.\/hooks\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/hooks\/([^'"]+)['"]/g,
        
        // –ò–º–ø–æ—Ä—Ç—ã lib
        /from\s+['"]\.\.\/\.\.\/lib\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/\.\.\/\.\.\/lib\/([^'"]+)['"]/g,
        /from\s+['"]\.\.\/lib\/([^'"]+)['"]/g,
    ];
    
    for (const pattern of importPatterns) {
        const matches = content.match(pattern);
        if (matches) {
            content = content.replace(pattern, (match, component) => {
                if (component) {
                    return `from '${basePath}${component}'`;
                } else {
                    return `from '${basePath}ui'`;
                }
            });
            changed = true;
        }
    }
    
    if (changed) {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${relativePath}`);
        return true;
    }
    
    return false;
}

function traverseAndFix(directory) {
    let filesFixed = 0;
    const files = fs.readdirSync(directory);
    
    for (const file of files) {
        const fullPath = path.join(directory, file);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
            filesFixed += traverseAndFix(fullPath);
        } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
            if (fixImportsInFile(fullPath)) {
                filesFixed++;
            }
        }
    }
    
    return filesFixed;
}

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...\n');
const totalFixed = traverseAndFix(appDir);
console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalFixed} —Ñ–∞–π–ª–æ–≤`);


