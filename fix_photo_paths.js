const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function fixPhotoPaths() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –≤ –ë–î...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ
    const products = await prisma.product.findMany({
      where: {
        catalog_category: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' },
        is_active: true,
        properties_data: {
          contains: 'photos'
        }
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ: ${products.length}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'products', 'cmg50xcgs001cv7mn0tdyk1wo');
    const realFiles = fs.readdirSync(uploadDir);
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${realFiles.length}`);

    let updatedCount = 0;

    for (const product of products) {
      try {
        const props = JSON.parse(product.properties_data || '{}');
        const photos = props.photos || [];
        
        if (photos.length === 0) continue;

        let hasChanges = false;
        const updatedPhotos = [];

        for (const photoPath of photos) {
          const fileName = path.basename(photoPath);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
          const fileExists = realFiles.includes(fileName);
          
          if (fileExists) {
            // –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
            updatedPhotos.push(photoPath);
          } else {
            // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–π
            const photoName = path.parse(fileName).name; // –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            
            // –ò—â–µ–º —Ñ–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
            const matchingFile = realFiles.find(file => {
              const fileBaseName = path.parse(file).name;
              return fileBaseName.includes(photoName) || photoName.includes(fileBaseName);
            });

            if (matchingFile) {
              const newPath = `/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/${matchingFile}`;
              updatedPhotos.push(newPath);
              hasChanges = true;
              console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å: ${photoPath} -> ${newPath}`);
            } else {
              // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
              hasChanges = true;
              console.log(`‚ùå –£–¥–∞–ª–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${photoPath}`);
            }
          }
        }

        if (hasChanges) {
          props.photos = updatedPhotos;
          
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(props)
            }
          });
          
          updatedCount++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${product.sku}`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error.message);
      }
    }

    console.log(`\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixPhotoPaths();
