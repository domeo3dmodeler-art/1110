import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface BulkUpdateRequest {
  updates: Array<{
    id: string;
    updates: {
      name?: string;
      base_price?: number;
      stock_quantity?: number;
      brand?: string;
      model?: string;
    };
  }>;
}

export async function POST(request: NextRequest) {
  try {
    const body: BulkUpdateRequest = await request.json();
    const { updates } = body;

    if (!updates || !Array.isArray(updates) || updates.length === 0) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
        { status: 400 }
      );
    }

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${updates.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    const results = [];
    const errors = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—à–∏–±–æ–∫
    for (const update of updates) {
      try {
        const { id, updates: productUpdates } = update;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        const existingProduct = await prisma.product.findUnique({
          where: { id },
          select: { id: true, sku: true, name: true }
        });

        if (!existingProduct) {
          errors.push(`–¢–æ–≤–∞—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        const updatedProduct = await prisma.product.update({
          where: { id },
          data: productUpdates,
          select: {
            id: true,
            sku: true,
            name: true,
            base_price: true,
            stock_quantity: true,
            brand: true,
            model: true
          }
        });

        results.push({
          id: updatedProduct.id,
          sku: updatedProduct.sku,
          name: updatedProduct.name,
          updated: true
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${updatedProduct.sku} - ${updatedProduct.name}`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${update.id}:`, error);
        errors.push(`–¢–æ–≤–∞—Ä ${update.id}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }

    console.log(`üéâ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${results.length} —É—Å–ø–µ—à–Ω–æ, ${errors.length} –æ—à–∏–±–æ–∫`);

    return NextResponse.json({
      success: true,
      updated: results.length,
      errors: errors.length,
      results,
      errorDetails: errors.length > 0 ? errors : undefined
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const categoryId = searchParams.get('categoryId');
    const limit = parseInt(searchParams.get('limit') || '100');
    const offset = parseInt(searchParams.get('offset') || '0');

    if (!categoryId) {
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
        { status: 400 }
      );
    }

    const products = await prisma.product.findMany({
      where: { catalog_category_id: categoryId },
      select: {
        id: true,
        sku: true,
        name: true,
        base_price: true,
        stock_quantity: true,
        brand: true,
        model: true
      },
      take: limit,
      skip: offset,
      orderBy: { sku: 'asc' }
    });

    const total = await prisma.product.count({
      where: { catalog_category_id: categoryId }
    });

    return NextResponse.json({
      success: true,
      products,
      total,
      limit,
      offset
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
