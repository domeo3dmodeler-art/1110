const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkInvalidPrices() {
  console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      select: {
        id: true,
        sku: true,
        name: true,
        base_price: true,
        properties_data: true,
        catalog_category: {
          select: {
            name: true
          }
        }
      }
    });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    const invalidProducts = [];

    for (const product of products) {
      try {
        const properties = product.properties_data ? 
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π —Ü–µ–Ω
        const priceFields = [
          '–†–†–¶',
          '–†–†–¶ —Ü–µ–Ω–∞',
          '–†–†–¶_—Ü–µ–Ω–∞',
          'RRP',
          'Retail Price',
          '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞',
          '–¶–µ–Ω–∞ –†–†–¶',
          '–¶–µ–Ω–∞_–†–†–¶',
          '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞',
          '–†–æ–∑–Ω–∏—á–Ω–∞—è_—Ü–µ–Ω–∞'
        ];

        const wholesalePriceFields = [
          '–¶–µ–Ω–∞ –æ–ø—Ç',
          '–¶–µ–Ω–∞_–æ–ø—Ç',
          '–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞',
          '–û–ø—Ç–æ–≤–∞—è_—Ü–µ–Ω–∞',
          'Wholesale Price',
          '–û–ø—Ç',
          '–û–ø—Ç_—Ü–µ–Ω–∞',
          'Wholesale',
          '–û–ø—Ç–æ–≤–∞—è',
          '–û–ø—Ç–æ–≤–∞—è_—Ü–µ–Ω–∞'
        ];

        let retailPrice = null;
        let wholesalePrice = null;
        let retailPriceField = null;
        let wholesalePriceField = null;

        // –ò—â–µ–º —Ä–æ–∑–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É
        for (const field of priceFields) {
          if (properties[field] !== undefined && properties[field] !== null) {
            retailPrice = properties[field];
            retailPriceField = field;
            break;
          }
        }

        // –ò—â–µ–º –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É
        for (const field of wholesalePriceFields) {
          if (properties[field] !== undefined && properties[field] !== null) {
            wholesalePrice = properties[field];
            wholesalePriceField = field;
            break;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        const basePrice = product.base_price;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
        function isValidPrice(price) {
          if (price === null || price === undefined || price === '') {
            return false;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
          const numPrice = parseFloat(price);
          if (isNaN(numPrice)) {
            return false;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 0
          if (numPrice <= 0) {
            return false;
          }
          
          return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ü–µ–Ω—ã
        const hasInvalidRetailPrice = !isValidPrice(retailPrice);
        const hasInvalidWholesalePrice = !isValidPrice(wholesalePrice);
        const hasInvalidBasePrice = !isValidPrice(basePrice);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–Ω–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        if (hasInvalidRetailPrice || hasInvalidWholesalePrice || hasInvalidBasePrice) {
          invalidProducts.push({
            id: product.id,
            sku: product.sku,
            name: product.name,
            category: product.catalog_category.name,
            base_price: basePrice,
            retail_price: retailPrice,
            wholesale_price: wholesalePrice,
            retail_price_field: retailPriceField,
            wholesale_price_field: wholesalePriceField,
            issues: {
              invalid_base_price: hasInvalidBasePrice,
              invalid_retail_price: hasInvalidRetailPrice,
              invalid_wholesale_price: hasInvalidWholesalePrice
            },
            properties_data: properties
          });
        }

      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error.message);
      }
    }

    console.log(`\n‚ùå –ù–∞–π–¥–µ–Ω–æ ${invalidProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏:`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const groupedByCategory = {};
    invalidProducts.forEach(product => {
      if (!groupedByCategory[product.category]) {
        groupedByCategory[product.category] = [];
      }
      groupedByCategory[product.category].push(product);
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    Object.keys(groupedByCategory).forEach(category => {
      console.log(`\nüìÅ ${category}: ${groupedByCategory[category].length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      groupedByCategory[category].forEach(product => {
        console.log(`  ‚Ä¢ ${product.sku} - ${product.name}`);
        console.log(`    –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.base_price}`);
        console.log(`    –†–†–¶ (${product.retail_price_field}): ${product.retail_price}`);
        console.log(`    –û–ø—Ç (${product.wholesale_price_field}): ${product.wholesale_price}`);
        
        const issues = [];
        if (product.issues.invalid_base_price) issues.push('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞');
        if (product.issues.invalid_retail_price) issues.push('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –†–†–¶');
        if (product.issues.invalid_wholesale_price) issues.push('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞');
        
        console.log(`    –ü—Ä–æ–±–ª–µ–º—ã: ${issues.join(', ')}`);
        console.log('');
      });
    });

    // –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
    const fs = require('fs');
    const csvContent = [
      'ID,SKU,–ù–∞–∑–≤–∞–Ω–∏–µ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞,–†–†–¶ –ø–æ–ª–µ,–†–†–¶ –∑–Ω–∞—á–µ–Ω–∏–µ,–û–ø—Ç –ø–æ–ª–µ,–û–ø—Ç –∑–Ω–∞—á–µ–Ω–∏–µ,–ü—Ä–æ–±–ª–µ–º—ã',
      ...invalidProducts.map(product => {
        const issues = [];
        if (product.issues.invalid_base_price) issues.push('–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞');
        if (product.issues.invalid_retail_price) issues.push('–†–†–¶');
        if (product.issues.invalid_wholesale_price) issues.push('–æ–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞');
        
        return [
          product.id,
          product.sku,
          `"${product.name}"`,
          `"${product.category}"`,
          product.base_price || '',
          product.retail_price_field || '',
          product.retail_price || '',
          product.wholesale_price_field || '',
          product.wholesale_price || '',
          `"${issues.join('; ')}"`
        ].join(',');
      })
    ].join('\n');

    const fileName = `invalid_prices_${new Date().toISOString().split('T')[0]}.csv`;
    fs.writeFileSync(fileName, csvContent, 'utf8');
    console.log(`\nüìÑ –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);

    // –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const jsonFileName = `invalid_prices_detailed_${new Date().toISOString().split('T')[0]}.json`;
    fs.writeFileSync(jsonFileName, JSON.stringify(invalidProducts, null, 2), 'utf8');
    console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${jsonFileName}`);

    return invalidProducts;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkInvalidPrices()
  .then(products => {
    console.log(`\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Ü–µ–Ω.`);
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
