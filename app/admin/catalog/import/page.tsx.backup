'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Button, Card, Badge } from '../../../../components/ui';
import { Upload, Download, FileText, CheckCircle, XCircle, AlertTriangle, History, RefreshCw, Trash2, Database, Upload as UploadIcon, ArrowRight, ArrowLeft, Settings } from 'lucide-react';
import * as XLSX from 'xlsx';
import { useImportTemplate, useFileAnalysis } from '../../../../hooks/useImportTemplate';
import CatalogTree from '../../../../components/admin/CatalogTree';
import TemplateManager from '../../../../components/admin/TemplateManager';

interface ImportHistoryItem {
  id: string;
  filename: string;
  imported_count: number;
  error_count: number;
  status: string;
  created_at: string;
}

interface PriceListData {
  headers: string[];
  rows: any[][];
  totalRows: number;
}

interface PhotoData {
  files: File[];
  totalCount: number;
}

interface PropertyMapping {
  fieldName: string;
  displayName: string;
  dataType: 'text' | 'number' | 'select' | 'boolean' | 'image';
  isRequired: boolean;
  isFilterable: boolean;
  isVisible: boolean;
  options?: string[];
  unit?: string;
}

interface CatalogCategory {
  id: string;
  name: string;
  level: number;
  parent_id?: string;
  product_count?: number;
  displayName?: string;
}

type ImportStep = 'catalog' | 'template' | 'upload' | 'validation' | 'import' | 'complete';
type TabType = 'import' | 'templates';

export default function CatalogImportPage() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeTab, setActiveTab] = useState<TabType>('import');
  const [currentStep, setCurrentStep] = useState<ImportStep>('catalog');
  const [priceListData, setPriceListData] = useState<PriceListData | null>(null);
  const [photoData, setPhotoData] = useState<PhotoData | null>(null);
  const [propertyMappings, setPropertyMappings] = useState<PropertyMapping[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedCatalogCategoryId, setSelectedCatalogCategoryId] = useState<string>('');
  const [requiredFields, setRequiredFields] = useState<any[]>([]);
  const [completedSteps, setCompletedSteps] = useState<ImportStep[]>([]);
  const [showProgressModal, setShowProgressModal] = useState(false);
  const [progressMessage, setProgressMessage] = useState('');
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
  const [fileHeaders, setFileHeaders] = useState<any[]>([]);
  const [fieldMappings, setFieldMappings] = useState<any[]>([]);
  
  // –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
  const { template, loading: templateLoading, loadTemplate, createTemplate } = useImportTemplate();
  const { analyzeFile, analyzing } = useFileAnalysis();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const [importHistory, setImportHistory] = useState<ImportHistoryItem[]>([]);
  const [loadingHistory, setLoadingHistory] = useState(false);
  const [catalogCategories, setCatalogCategories] = useState<CatalogCategory[]>([]);
  const [categorySearchTerm, setCategorySearchTerm] = useState('');
  const [photoCategorySearchTerm, setPhotoCategorySearchTerm] = useState('');
  const [uploadingPhotos, setUploadingPhotos] = useState(false);
  const [photoMappingProperty, setPhotoMappingProperty] = useState<string>('');
  const [existingProductProperties, setExistingProductProperties] = useState<string[]>([]);
  const [loadingProperties, setLoadingProperties] = useState(false);
  const [selectedFields, setSelectedFields] = useState<Set<string>>(new Set());
  const [fieldSettings, setFieldSettings] = useState<Record<string, {
    displayName: string;
    isRequired: boolean;
    dataType: 'text' | 'number' | 'select' | 'boolean' | 'image';
  }>>({});

  useEffect(() => {
    loadImportHistory();
    loadCatalogCategories();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');
    if (categoryParam) {
      setSelectedCatalogCategoryId(categoryParam);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    if (selectedCatalogCategoryId) {
      loadExistingProductProperties(selectedCatalogCategoryId);
    }
  }, [selectedCatalogCategoryId]);

  const loadImportHistory = async () => {
    try {
      setLoadingHistory(true);
      const response = await fetch('/api/catalog/import?action=history');
      const data = await response.json();
      setImportHistory(data);
    } catch (error) {
      console.error('Error loading import history:', error);
    } finally {
      setLoadingHistory(false);
    }
  };

  const loadExistingProductProperties = async (categoryId: string) => {
    if (!categoryId) {
      setExistingProductProperties([]);
      return;
    }

    setLoadingProperties(true);
    try {
      const response = await fetch(`/api/catalog/products?categoryId=${categoryId}&limit=10`);
      const data = await response.json();
      
      console.log('Existing products response:', data);
      
      if (data.success && data.products && data.products.length > 0) {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        const allProperties = new Set<string>();
        
        data.products.forEach((product: any) => {
          if (product.properties_data) {
            try {
              const properties = typeof product.properties_data === 'string' 
                ? JSON.parse(product.properties_data) 
                : product.properties_data;
              
              Object.keys(properties).forEach(key => {
                // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                if (!['photos', 'id', 'created_at', 'updated_at'].includes(key)) {
                  allProperties.add(key);
                }
              });
            } catch (error) {
              console.error('Error parsing properties_data:', error);
            }
          }
        });
        
        setExistingProductProperties(Array.from(allProperties).sort());
        console.log('Loaded existing properties:', Array.from(allProperties));
      } else {
        setExistingProductProperties([]);
      }
    } catch (error) {
      console.error('Error loading existing product properties:', error);
      setExistingProductProperties([]);
    } finally {
      setLoadingProperties(false);
    }
  };

  const loadCatalogCategories = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...');
      const response = await fetch('/api/catalog/categories-flat');
      const data = await response.json();
      
      console.log('üì¶ –û—Ç–≤–µ—Ç API –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –Ω–æ–≤–æ–≥–æ API
      const categories = data.categories || [];
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      console.log('–ü—Ä–∏–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories[0]);
      
      // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setCatalogCategories(categories);
      
      console.log('üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:', categories.filter(c => c.product_count > 0).length);
      
    } catch (error) {
      console.error('Error loading catalog categories:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–π—Å–∞
  function createCSVFromPriceListData(rows: any[][], headers: string[]): string {
    let csvContent = '';
    csvContent += headers.map(header => `"${header.replace(/"/g, '""')}"`).join(',') + '\n';
    rows.forEach(row => {
      const csvRow = row.map(cell => {
        if (cell === null || cell === undefined) return '""';
        const cellStr = String(cell);
        if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
          return `"${cellStr.replace(/"/g, '""')}"`;
        }
        return cellStr;
      }).join(',');
      csvContent += csvRow + '\n';
    });
    return csvContent;
  }

  const handlePriceListUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);
    
    try {
      const buffer = await file.arrayBuffer();
      const workbook = XLSX.read(buffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      const jsonData: any[][] = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length === 0) {
        throw new Error('–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
      
      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1);
      
      const filteredRows = rows.filter(row => 
        row.some(cell => cell !== null && cell !== undefined && cell !== '')
      );
      
      const priceListData: PriceListData = {
        headers: headers,
        rows: filteredRows,
        totalRows: filteredRows.length
      };
      
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:', {
        headers: headers.length,
        rows: filteredRows.length,
        sampleData: filteredRows.slice(0, 3)
      });
      
      setPriceListData(priceListData);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const initialSelectedFields = new Set(headers);
      const initialFieldSettings: Record<string, any> = {};
      
      headers.forEach(header => {
        // –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–µ–∫
        let detectedType: 'text' | 'number' | 'select' | 'boolean' | 'image' = 'text';
        let isRequired = false;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        const sampleValues = filteredRows.slice(0, 10).map(row => {
          const headerIndex = headers.indexOf(header);
          return row[headerIndex];
        }).filter(val => val !== null && val !== undefined && val !== '');
        
        if (sampleValues.length > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ–º
          const numericValues = sampleValues.filter(val => {
            const str = String(val).trim();
            return !isNaN(Number(str)) && str !== '';
          });
          
          if (numericValues.length === sampleValues.length) {
            detectedType = 'number';
          }
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
          else if (sampleValues.every(val => {
            const str = String(val).toLowerCase().trim();
            return ['–¥–∞', '–Ω–µ—Ç', 'true', 'false', '1', '0', '–¥–∞/–Ω–µ—Ç'].includes(str);
          })) {
            detectedType = 'boolean';
          }
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          else if (sampleValues.every(val => {
            const str = String(val).toLowerCase().trim();
            return str.startsWith('http') && (str.includes('.jpg') || str.includes('.png') || str.includes('.jpeg') || str.includes('.gif'));
          })) {
            detectedType = 'image';
          }
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–∏—Å–∫–æ–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
          else if (new Set(sampleValues).size <= Math.min(10, sampleValues.length * 0.5)) {
            detectedType = 'select';
          }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
        const headerLower = header.toLowerCase();
        if (headerLower.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || headerLower.includes('–º–æ–¥–µ–ª—å') || 
            headerLower.includes('–∞—Ä—Ç–∏–∫—É–ª') || headerLower.includes('—Ü–µ–Ω–∞') || 
            headerLower.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
          isRequired = true;
        }
        
        initialFieldSettings[header] = {
          displayName: header,
          isRequired,
          dataType: detectedType
        };
      });
      
      setSelectedFields(initialSelectedFields);
      setFieldSettings(initialFieldSettings);
      setCompletedSteps(prev => [...prev, 'upload']);
      setCurrentStep('catalog');
      
    } catch (error) {
      console.error('Error processing price list:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsProcessing(false);
    }
  }, []);

  const handleCatalogCategorySelect = (categoryId: string) => {
    setSelectedCatalogCategoryId(categoryId);
  };

  const handleCatalogComplete = async () => {
    setCompletedSteps(prev => [...prev, 'catalog']);
    setCurrentStep('template');
  };

  const handleTemplateComplete = () => {
    setCompletedSteps(prev => [...prev, 'template']);
    setCurrentStep('upload');
  };

  const handleFileUpload = async (file: File) => {
    setIsProcessing(true);
    try {
      const buffer = await file.arrayBuffer();
      const workbook = XLSX.read(buffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      if (jsonData.length < 2) {
        alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1) as any[][];

      setPriceListData({
        headers,
        rows,
        totalRows: rows.length
      });

      setCompletedSteps(prev => [...prev, 'upload']);
      setCurrentStep('validation');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
    } finally {
      setIsProcessing(false);
    }
  };

  const handlePhotosComplete = async (photoFiles: File[]) => {
  useEffect(() => {
    console.log('üöÄüöÄüöÄ === handlePropertiesComplete –í–´–ó–í–ê–ù === üöÄüöÄüöÄ');
    console.log('fields:', fields);
    console.log('fieldMappings:', fieldMappings);
    console.log('selectedCatalogCategoryId:', selectedCatalogCategoryId);
    console.log('priceListData:', priceListData);
    console.log('template:', template);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ fields
    const finalFields = fieldMappings.length > 0 
      ? fieldMappings.map((mapping: any) => ({
          fieldName: mapping.templateField.fieldName,
          displayName: mapping.templateField.displayName,
          dataType: mapping.templateField.dataType,
          isRequired: mapping.templateField.isRequired,
          mappedToFileField: mapping.fileHeader?.name
        }))
      : fields;
    
    setRequiredFields(finalFields);
    
    setShowProgressModal(true);
    setProgressMessage('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      if (!selectedCatalogCategoryId) {
        alert('–û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
        setShowProgressModal(false);
        return;
      }

      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–≤–æ–π—Å—Ç–≤ –≤ –ë–î...');
      console.log('selectedCatalogCategoryId:', selectedCatalogCategoryId);
      console.log('finalFields:', finalFields);
      console.log('priceListData:', priceListData);

      setProgressMessage('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö...');
      const csvData = createCSVFromPriceListData(priceListData?.rows || [], priceListData?.headers || []);
      console.log('CSV –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã, —Ä–∞–∑–º–µ—Ä:', csvData.length);
      
      const csvBlob = new Blob([csvData], { type: 'text/csv' });
      const csvFile = new File([csvBlob], 'price_list.csv', { type: 'text/csv' });
      
      setProgressMessage('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const formData = new FormData();
      formData.append('file', csvFile);
      formData.append('category', selectedCatalogCategoryId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–ø–ø–∏–Ω–≥–µ –∏–ª–∏ –ø–æ–ª—è—Ö
      if (fieldMappings.length > 0) {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–∞–ø–ø–∏–Ω–≥–æ–º:', fieldMappings);
        formData.append('mapping', JSON.stringify(fieldMappings));
        // –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ ID
        if (template?.id) {
          formData.append('templateId', template.id);
        }
      } else {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—è–º–∏:', fields);
        formData.append('fields', JSON.stringify(fields));
      }
      formData.append('mode', 'full');
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ /api/admin/import/universal...');
      console.log('selectedCatalogCategoryId:', selectedCatalogCategoryId);
      console.log('priceListData headers:', priceListData?.headers);
      console.log('priceListData rows count:', priceListData?.rows?.length);
      
      const productsResponse = await fetch('/api/admin/simple-import', {
        method: 'POST',
        body: formData,
      });
      
      console.log('–û—Ç–≤–µ—Ç –æ—Ç API –∏–º–ø–æ—Ä—Ç–∞:', productsResponse.status, productsResponse.statusText);

      if (!productsResponse.ok) {
        const errorText = await productsResponse.text();
        console.error('–û—à–∏–±–∫–∞ API:', errorText);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: ' + errorText);
      }

      const productsResult = await productsResponse.json();
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', productsResult);
      
      if (productsResult.success) {
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: ${productsResult.message}`);
        if (productsResult.warnings && productsResult.warnings.length > 0) {
          console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', productsResult.warnings);
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', productsResult.error);
        if (productsResult.details) {
          console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:', productsResult.details);
        }
      }

      // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const selectedFieldNames = fields.map(f => f.fieldName);
      const requiredFieldNames = fields.filter(f => f.isRequired).map(f => f.fieldName);
      
      const templateResponse = await fetch('/api/admin/import-templates', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: `–®–∞–±–ª–æ–Ω –¥–ª—è ${catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name || '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`,
          description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏`,
          catalog_category_id: selectedCatalogCategoryId,
          template_config: JSON.stringify({
            headers: selectedFieldNames,
            requiredFields: requiredFieldNames,
            fieldMappings: fields
          }),
          field_mappings: JSON.stringify(fields),
          required_fields: JSON.stringify(requiredFieldNames),
          calculator_fields: JSON.stringify(selectedFieldNames),
          export_fields: JSON.stringify(selectedFieldNames)
        }),
      });

      if (templateResponse.ok) {
        console.log('–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω');
      } else {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏');
      }
      
      const savedProductsCount = productsResult.database_saved || productsResult.imported || 0;
      const totalProcessedCount = productsResult.total_processed || productsResult.imported || 0;
      const categoryName = catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name || '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
      
      console.log('üîç –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
      console.log('üîç –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', totalProcessedCount);
      console.log('üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', savedProductsCount);
      console.log('üîç –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', totalProcessedCount - savedProductsCount);
      
      if (savedProductsCount === 0) {
        console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–≤–∞—Ä—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
        alert(`‚ùå –û—à–∏–±–∫–∞!\n–¢–æ–≤–∞—Ä—ã –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.`);
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let message;
      if (totalProcessedCount > savedProductsCount) {
        const failedCount = productsResult.failed_products || 0;
        const errorStats = productsResult.error_stats || {};
        const topErrors = Object.entries(errorStats)
          .sort(([,a], [,b]) => (b as number) - (a as number))
          .slice(0, 3)
          .map(([error, count]) => `‚Ä¢ ${error}: ${count} —à—Ç.`)
          .join('\n');
        
        message = `‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö!\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessedCount} —Ç–æ–≤–∞—Ä–æ–≤\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${savedProductsCount} —Ç–æ–≤–∞—Ä–æ–≤\n–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${failedCount} —Ç–æ–≤–∞—Ä–æ–≤\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:\n${topErrors}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12).`;
      } else {
        message = `‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}\n–¢–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${savedProductsCount}\n–®–∞–±–ª–æ–Ω: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π`;
      }
      
      alert(message);
      
      setCompletedSteps(prev => [...prev, 'properties']);
      setShowProgressModal(false);
      setCurrentStep('photos');
      
    } catch (error) {
      console.error('Error saving products and properties:', error);
      setShowProgressModal(false);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }, [fieldMappings, selectedCatalogCategoryId, priceListData, template, catalogCategories]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ properties, –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏
  useEffect(() => {
    console.log('üîç useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:', {
      currentStep,
      fieldMappingsLength: fieldMappings.length,
      hasTemplate: !!template,
      templateId: template?.id
    });
    
    if (currentStep === 'properties' && fieldMappings.length > 0 && template) {
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ properties, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ø–ø–∏–Ω–≥–∏');
      console.log('fieldMappings:', fieldMappings);
      
      const mappedFields = fieldMappings.map((mapping: any) => ({
        fieldName: mapping.templateField.fieldName,
        displayName: mapping.templateField.displayName,
        dataType: mapping.templateField.dataType,
        isRequired: mapping.templateField.isRequired,
        mappedToFileField: mapping.fileHeader?.name
      }));
      
      console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º handlePropertiesComplete —Å mappedFields:', mappedFields);
      
      // –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞–µ–º handlePropertiesComplete –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞
      handlePropertiesComplete(mappedFields);
    } else {
      console.log('‚ùå –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', {
        isPropertiesStep: currentStep === 'properties',
        hasMappings: fieldMappings.length > 0,
        hasTemplate: !!template
      });
    }
  }, [currentStep, fieldMappings, template, handlePropertiesComplete]);

  const handlePhotosComplete = async (photoFiles: File[]) => {
    const photoData: PhotoData = {
      files: photoFiles,
      totalCount: photoFiles.length
    };
    
    setPhotoData(photoData);
    
    try {
      setUploadingPhotos(true);
      const formData = new FormData();
      
      photoFiles.forEach((photo) => {
        formData.append('photos', photo);
      });
      
      formData.append('category', selectedCatalogCategoryId);
      formData.append('mapping_property', photoMappingProperty);

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...', photoFiles.length, '—Ñ–∞–π–ª–æ–≤');
      
      const response = await fetch('/api/admin/import/photos-improved', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      console.log('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result);
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      let reportMessage = `üì∏ –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û –ó–ê–í–ï–†–®–ï–ù–ê!\n\n`;
      reportMessage += `üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.uploaded || 0}\n`;
      reportMessage += `üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Ç–æ–≤–∞—Ä–∞–º: ${result.linked || 0}\n`;
      reportMessage += `‚ùå –û—à–∏–±–æ–∫: ${result.errors || 0}\n\n`;
      
      if (result.uploaded > 0) {
        reportMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.uploaded} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n`;
      }
      
      if (result.linked > 0) {
        reportMessage += `üéØ ${result.linked} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ\n`;
      }
      
      if (result.errors > 0) {
        reportMessage += `‚ö†Ô∏è ${result.errors} —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å\n`;
      }
      
      if (result.details && result.details.length > 0) {
        reportMessage += `\nüìã –î–ï–¢–ê–õ–ò:\n`;
        result.details.forEach((detail: any, index: number) => {
          reportMessage += `${index + 1}. ${detail.fileName}: ${detail.message}\n`;
        });
      }
      
      alert(reportMessage);
      
      setCompletedSteps(prev => [...prev, 'photos']);
      setCurrentStep('complete');
      
    } catch (error) {
      console.error('Error uploading photos:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setUploadingPhotos(false);
    }
  };

  const getStepTitle = () => {
    switch (currentStep) {
      case 'catalog': return '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞';
      case 'template': return '–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞';
      case 'upload': return '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞';
      case 'validation': return '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è';
      case 'import': return '–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤';
      case 'complete': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞';
      default: return '–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤';
    }
  };

  const getStepDescription = () => {
    switch (currentStep) {
      case 'catalog': return '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤';
      case 'template': return '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
      case 'upload': return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö';
      case 'validation': return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω—É';
      case 'import': return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É';
      case 'complete': return '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã';
      default: return '';
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'catalog':
        return (
          <div className="space-y-6">
            <div className="grid gap-4">
              <h4 className="text-lg font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞:</h4>
              
              {/* –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
              <div className="relative">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                  value={categorySearchTerm}
                  onChange={(e) => setCategorySearchTerm(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                />
                <div className="absolute right-3 top-2.5 text-gray-400">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>

              {/* –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              <div className="border rounded-lg max-h-80 overflow-y-auto">
                <CatalogTree
                  categories={catalogCategories}
                  selectedCategoryId={selectedCatalogCategoryId}
                  onCategorySelect={setSelectedCatalogCategoryId}
                  searchTerm={categorySearchTerm}
                />
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              {selectedCatalogCategoryId && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span className="text-sm font-medium text-blue-900">
                        –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º */}
            <TemplateManager
              catalogCategoryId={selectedCatalogCategoryId}
              catalogCategoryName={catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
            />
            
            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setCurrentStep('upload')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                –ù–∞–∑–∞–¥
          </Button>
          <Button
                onClick={handleCatalogComplete}
                disabled={!selectedCatalogCategoryId}
                className={selectedCatalogCategoryId ? 'bg-black hover:bg-gray-800' : ''}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        </div>
      </div>
        );


      case 'template':
        return (
          <div className="space-y-6">
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="text-sm font-medium text-blue-900">
                  –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
                </span>
              </div>
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º */}
            <TemplateManager
              catalogCategoryId={selectedCatalogCategoryId}
              catalogCategoryName={catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
            />

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
            <div className="flex justify-end">
              <Button
                onClick={handleTemplateComplete}
                className="bg-black hover:bg-gray-800"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      case 'upload':
        return (
          <div className="space-y-6">
            <div className="bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-6">
              <div className="text-center">
                <div className="text-3xl mb-3">üìä</div>
                <h3 className="text-lg font-semibold text-black mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</h3>
                <p className="text-gray-600 mb-4 text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö</p>
                
                <input
                  type="file"
                  accept=".xlsx,.xls,.csv"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      handleFileUpload(file);
                    }
                  }}
                  className="hidden"
                  id="price-list-upload"
                />
                <label
                  htmlFor="price-list-upload"
                  className="inline-flex items-center px-4 py-2 bg-black text-white rounded hover:bg-yellow-400 hover:text-black transition-all duration-200 cursor-pointer text-sm"
                >
                  {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'}
                </label>
                
                <p className="text-xs text-gray-500 mt-2">–§–æ—Ä–º–∞—Ç—ã: .xlsx, .csv</p>
              </div>
            </div>
          </div>
        );

      case 'validation':
        return priceListData ? (
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π</h4>
              <p className="text-gray-700 text-sm">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </p>
            </div>

            {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–∞–π–ª–∞ —Å —à–∞–±–ª–æ–Ω–æ–º */}
            <div className="space-y-4">
              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span className="text-sm font-medium text-green-900">
                    –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {priceListData.totalRows} —Å—Ç—Ä–æ–∫
                  </span>
                </div>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-blue-500" />
                  <span className="text-sm font-medium text-blue-900">
                    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π...
                  </span>
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
            <div className="flex justify-end">
              <Button
                onClick={handleValidationComplete}
                className="bg-black hover:bg-gray-800"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∏–º–ø–æ—Ä—Ç—É
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        ) : (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        );

      case 'import':
        return (
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤</h4>
              <p className="text-gray-700 text-sm">
                –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
              </p>
            </div>

            {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ */}
            <div className="text-center py-8">
              <Button
                onClick={() => {
                  setCompletedSteps(prev => [...prev, 'import']);
                  setCurrentStep('complete');
                }}
                className="bg-black hover:bg-gray-800"
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
                <Upload className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );


      case 'properties':
        return priceListData ? (
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤</h4>
              <p className="text-gray-700 text-sm">
                –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. 
                –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç –ø–æ–ª—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞.
              </p>
            </div>

            <div className="grid gap-3 max-h-96 overflow-y-auto">
              {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
              <div className="grid grid-cols-12 gap-3 p-3 bg-gray-50 rounded-lg font-medium text-sm text-gray-700">
                <div className="col-span-1">–í—ã–±—Ä–∞—Ç—å</div>
                <div className="col-span-3">–ü–æ–ª–µ –≤ —Ñ–∞–π–ª–µ</div>
                <div className="col-span-3">–ù–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</div>
                <div className="col-span-2">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</div>
                <div className="col-span-3">–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö</div>
              </div>
              
              {priceListData.headers.map((header, index) => (
                <div key={index} className="grid grid-cols-12 gap-3 p-3 border rounded-lg items-center">
                  <div className="col-span-1">
                    <input
                      type="checkbox"
                      id={`field-${index}`}
                      checked={selectedFields.has(header)}
                      onChange={(e) => {
                        const newSelectedFields = new Set(selectedFields);
                        if (e.target.checked) {
                          newSelectedFields.add(header);
                        } else {
                          newSelectedFields.delete(header);
                        }
                        setSelectedFields(newSelectedFields);
                      }}
                      className="w-4 h-4 text-black"
                    />
                  </div>
                  <div className="col-span-3">
                    <label htmlFor={`field-${index}`} className="block text-sm font-medium text-gray-700">
                      {header}
                    </label>
                  </div>
                  <div className="col-span-3">
                    <input
                      type="text"
                      placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"
                      value={fieldSettings[header]?.displayName || header}
                      onChange={(e) => {
                        setFieldSettings(prev => ({
                          ...prev,
                          [header]: {
                            ...prev[header],
                            displayName: e.target.value
                          }
                        }));
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                  <div className="col-span-2">
                    <label className="flex items-center space-x-1 text-sm">
                      <input
                        type="checkbox"
                        checked={fieldSettings[header]?.isRequired || false}
                        onChange={(e) => {
                          setFieldSettings(prev => ({
                            ...prev,
                            [header]: {
                              ...prev[header],
                              isRequired: e.target.checked
                            }
                          }));
                        }}
                        className="w-3 h-3"
                      />
                      <span>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</span>
                    </label>
                  </div>
                  <div className="col-span-3">
                    <select 
                      value={fieldSettings[header]?.dataType || 'text'}
                      onChange={(e) => {
                        setFieldSettings(prev => ({
                          ...prev,
                          [header]: {
                            ...prev[header],
                            dataType: e.target.value as 'text' | 'number' | 'select' | 'boolean' | 'image'
                          }
                        }));
                      }}
                      className="w-full text-sm border rounded px-2 py-1"
                    >
                      <option value="text">–¢–µ–∫—Å—Ç</option>
                      <option value="number">–ß–∏—Å–ª–æ</option>
                      <option value="select">–°–ø–∏—Å–æ–∫</option>
                      <option value="boolean">–î–∞/–ù–µ—Ç</option>
                      <option value="image">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</option>
                    </select>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setCurrentStep('catalog')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={() => {
                  // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                  const fields = Array.from(selectedFields).map(header => {
                    const settings = fieldSettings[header];
                    return {
                      fieldName: header,
                      displayName: settings?.displayName || header,
                      isRequired: settings?.isRequired || false,
                      dataType: settings?.dataType || 'text'
                    };
                  });
                  
                  console.log('–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è:', fields);
                  handlePropertiesComplete(fields);
                }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
        </div>
        ) : null;

      case 'photos':
        return (
          <div className="space-y-6">
            {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
            <div className="bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-6">
              <div className="text-center">
                <div className="text-3xl mb-3">üì∏</div>
                <h3 className="text-lg font-semibold text-black mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <p className="text-gray-600 mb-4 text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º</p>
                
                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 max-w-2xl mx-auto">
                  
                  {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    </label>
                    <select
                      value={selectedCatalogCategoryId}
                      onChange={(e) => setSelectedCatalogCategoryId(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-black focus:border-transparent text-sm"
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é...</option>
                      {catalogCategories
                        .filter(cat => cat.product_count > 0)
                        .map((category) => (
                          <option key={category.id} value={category.id}>
                            {category.name} ({category.product_count} —Ç–æ–≤–∞—Ä–æ–≤)
                          </option>
                        ))}
                    </select>
                  </div>

                  {/* –í—ã–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
                    </label>
                    <select
                      value={photoMappingProperty}
                      onChange={(e) => setPhotoMappingProperty(e.target.value)}
                      disabled={!selectedCatalogCategoryId}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-black focus:border-transparent text-sm disabled:bg-gray-100"
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ...</option>
                      {(priceListData?.headers || existingProductProperties).map((property, index) => (
                        <option key={index} value={property}>
                          {property}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                {/* –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
                {selectedCatalogCategoryId && photoMappingProperty && (
                  <div className="bg-blue-50 border border-blue-200 rounded-md p-3 text-sm mb-4 max-w-2xl mx-auto">
                    <p className="text-blue-800">
                      <strong>–ü—Ä–∏–≤—è–∑–∫–∞:</strong> –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) = –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ "{photoMappingProperty}"
                    </p>
                  </div>
                )}

                {/* Drag & Drop –∑–æ–Ω–∞ */}
                <div 
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-all max-w-2xl mx-auto ${
                    !selectedCatalogCategoryId || !photoMappingProperty
                      ? 'border-gray-300 bg-gray-50'
                      : uploadingPhotos
                        ? 'border-blue-400 bg-blue-50'
                        : 'border-gray-400 bg-white hover:border-blue-400 hover:bg-blue-50'
                  }`}
                  onDrop={(e) => {
                    e.preventDefault();
                    if (selectedCatalogCategoryId && photoMappingProperty && !uploadingPhotos) {
                      const files = Array.from(e.dataTransfer.files).filter(file => 
                        file.type.startsWith('image/')
                      );
                      if (files.length > 0) {
                        handlePhotosComplete(files);
                      }
                    }
                  }}
                  onDragOver={(e) => e.preventDefault()}
                  onDragEnter={(e) => e.preventDefault()}
                >
                  {uploadingPhotos ? (
                    <div className="space-y-4">
                      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                      <div>
                        <h3 className="text-lg font-semibold text-blue-900">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...</h3>
                        <p className="text-blue-700 text-sm">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                      </div>
                    </div>
                  ) : !selectedCatalogCategoryId || !photoMappingProperty ? (
                    <div className="space-y-4">
                      <div className="text-4xl text-gray-400">üì∏</div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-500">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
                        <p className="text-gray-400 text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏</p>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="text-4xl text-blue-500">üì∏</div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞</h3>
                        <p className="text-gray-600 text-sm mb-4">–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤</p>
                        
                        <input
                          type="file"
                          accept="image/*"
                          multiple
                          onChange={(e) => {
                            const files = Array.from(e.target.files || []);
                            if (files.length > 0) {
                              handlePhotosComplete(files);
                            }
                          }}
                          className="hidden"
                          id="photos-upload"
                        />
                        <label
                          htmlFor="photos-upload"
                          className="inline-flex items-center px-4 py-2 bg-black text-white rounded hover:bg-yellow-400 hover:text-black transition-all duration-200 cursor-pointer text-sm"
                        >
                          {uploadingPhotos ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'}
                        </label>
                      </div>
                      
                      <p className="text-xs text-gray-500 mt-2">–§–æ—Ä–º–∞—Ç—ã: .jpg, .png, .gif</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setCurrentStep('properties')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
              <Button 
                onClick={() => {
                  setCompletedSteps(prev => [...prev, 'photos']);
                  setCurrentStep('complete');
                }}
                disabled={uploadingPhotos}
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      case 'complete':
        return (
          <div className="space-y-6">
            <div className="text-center py-12">
              <div className="text-6xl mb-6">‚úÖ</div>
              <h3 className="text-xl font-semibold text-black mb-4">–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h3>
              <p className="text-gray-600 mb-6">–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</p>
              
              <div className="grid grid-cols-3 gap-4 max-w-md mx-auto mb-6">
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{priceListData?.totalRows || 0}</div>
                  <div className="text-sm text-gray-600">–¢–æ–≤–∞—Ä–æ–≤</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{priceListData?.headers.length || 0}</div>
                  <div className="text-sm text-gray-600">–°–≤–æ–π—Å—Ç–≤</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{photoData?.totalCount || 0}</div>
                  <div className="text-sm text-gray-600">–§–æ—Ç–æ</div>
                </div>
              </div>
              
              <div className="space-y-3">
                <Button 
                  variant="primary" 
                  onClick={() => {
                    setCurrentStep('upload');
                    setCompletedSteps([]);
                    setPriceListData(null);
                    setPhotoData(null);
                    setSelectedCatalogCategoryId('');
                  }}
                >
                  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã
                </Button>
                <div>
                  <Button variant="secondary" onClick={() => window.location.href = '/admin/catalog'}>
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
                  </Button>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center">
          <h1 className="text-3xl font-bold text-black mb-2">–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥</h1>
          <p className="text-gray-600">–ü–æ—à–∞–≥–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å–≤–æ–π—Å—Ç–≤</p>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('import')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'import'
                  ? 'border-black text-black'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <Upload className="w-4 h-4 mr-2 inline" />
              –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
            </button>
            <button
              onClick={() => setActiveTab('templates')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'templates'
                  ? 'border-black text-black'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <Settings className="w-4 h-4 mr-2 inline" />
              –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
            </button>
          </nav>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
        {activeTab === 'import' ? (
          <>
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —à–∞–≥–æ–≤ */}
            <Card variant="base">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-lg font-semibold text-black">{getStepTitle()}</h2>
                    <p className="text-gray-600">{getStepDescription()}</p>
                  </div>
                  {currentStep !== 'catalog' && (
                    <Button variant="secondary" onClick={() => setCurrentStep('catalog')}>
                      –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                    </Button>
                  )}
                </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
            <div className="flex items-center space-x-4 mb-8">
              {[
                { key: 'catalog', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', icon: 'üìÅ' },
                { key: 'template', label: '–®–∞–±–ª–æ–Ω', icon: 'üìã' },
                { key: 'upload', label: '–§–∞–π–ª', icon: 'üìä' },
                { key: 'validation', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞', icon: 'üîç' },
                { key: 'import', label: '–ò–º–ø–æ—Ä—Ç', icon: '‚¨ÜÔ∏è' },
                { key: 'complete', label: '–ì–æ—Ç–æ–≤–æ', icon: '‚úÖ' }
              ].map((step, index) => {
                const isActive = step.key === currentStep;
                const isCompleted = completedSteps.includes(step.key as ImportStep);
                
                return (
                  <div key={step.key} className="flex items-center">
                    <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 transition-colors ${
                      isActive 
                        ? 'border-black bg-black text-white' 
                        : isCompleted 
                          ? 'border-green-500 bg-green-500 text-white'
                          : 'border-gray-300 bg-white text-gray-400'
                    }`}>
                      <span className="text-lg">{step.icon}</span>
                    </div>
                    <span className={`ml-2 text-sm font-medium ${
                      isActive ? 'text-black' : isCompleted ? 'text-green-600' : 'text-gray-500'
                    }`}>
                      {step.label}
                    </span>
                    {index < 4 && (
                      <div className={`w-8 h-0.5 mx-3 ${
                        isCompleted ? 'bg-green-500' : 'bg-gray-300'
                      }`} />
                    )}
                  </div>
                );
              })}
            </div>

                {/* –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–∞ */}
                {renderStepContent()}
              </div>
            </Card>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
            {showProgressModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full mx-4">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
                    <p className="text-gray-600">{progressMessage}</p>
                  </div>
                </div>
              </div>
            )}

            {/* –ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ */}
            <Card variant="base">
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">–ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤</h3>
                  <Button variant="secondary" onClick={loadImportHistory} disabled={loadingHistory}>
                    <RefreshCw className={`w-4 h-4 mr-2 ${loadingHistory ? 'animate-spin' : ''}`} />
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </Button>
                </div>
                
                <div className="space-y-3">
                  {importHistory.length === 0 ? (
                    <p className="text-gray-500 text-center py-4">–ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—É—Å—Ç–∞</p>
                  ) : (
                    importHistory.map((item) => (
                      <div key={item.id} className="flex items-center justify-between p-3 border rounded-lg">
                        <div className="flex items-center space-x-3">
                          <FileText className="w-5 h-5 text-gray-400" />
                          <div>
                            <p className="font-medium">{item.filename}</p>
                            <p className="text-sm text-gray-500">
                              {new Date(item.created_at).toLocaleString('ru-RU')}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge variant={item.status === 'completed' ? 'success' : 'warning'}>
                            {item.imported_count} —Ç–æ–≤–∞—Ä–æ–≤
                          </Badge>
                          {item.error_count > 0 && (
                            <Badge variant="error">
                              {item.error_count} –æ—à–∏–±–æ–∫
                            </Badge>
                          )}
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </Card>
          </>
        ) : (
          /* –í–∫–ª–∞–¥–∫–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ */
          <div className="space-y-6">
            {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ */}
            <Card variant="base">
              <div className="p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
                </h3>
                
                <div className="grid gap-4">
                  {/* –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                      value={categorySearchTerm}
                      onChange={(e) => setCategorySearchTerm(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                    />
                    <div className="absolute right-3 top-2.5 text-gray-400">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>
                  </div>

                  {/* –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
                  <div className="border rounded-lg max-h-80 overflow-y-auto">
                    <CatalogTree
                      categories={catalogCategories}
                      selectedCategoryId={selectedCatalogCategoryId}
                      onCategorySelect={setSelectedCatalogCategoryId}
                      searchTerm={categorySearchTerm}
                    />
                  </div>
                </div>
              </div>
            </Card>

          </div>
        )}
      </div>
    </div>
  );
}