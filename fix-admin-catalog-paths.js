const fs = require('fs');
const path = require('path');

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ —Ñ–∞–π–ª–∞—Ö app/app/admin/catalog/* —Å ../../../ –Ω–∞ ../../

function fixAdminCatalogPaths() {
  const adminCatalogDir = path.join(__dirname, 'app', 'app', 'admin', 'catalog');
  
  if (!fs.existsSync(adminCatalogDir)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ app/app/admin/catalog –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  let fixedFiles = 0;
  
  function processDirectory(dir) {
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        processDirectory(filePath);
      } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
        let content = fs.readFileSync(filePath, 'utf8');
        let modified = false;
        
        // –ó–∞–º–µ–Ω—è–µ–º ../../../components/ –Ω–∞ ../../components/
        if (content.includes('../../../components/')) {
          content = content.replace(/\.\.\/\.\.\/\.\.\/components\//g, '../../components/');
          modified = true;
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º ../../../lib/ –Ω–∞ ../../lib/
        if (content.includes('../../../lib/')) {
          content = content.replace(/\.\.\/\.\.\/\.\.\/lib\//g, '../../lib/');
          modified = true;
        }
        
        if (modified) {
          fs.writeFileSync(filePath, content, 'utf8');
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
          fixedFiles++;
        }
      }
    }
  }
  
  processDirectory(adminCatalogDir);
  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
}

fixAdminCatalogPaths();
