const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixPrices() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Ü–µ–Ω
    const products = await prisma.product.findMany({
      select: {
        id: true,
        sku: true,
        name: true,
        base_price: true,
        properties_data: true,
        catalog_category: {
          select: {
            name: true
          }
        }
      }
    });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    let fixedCount = 0;
    const fixedProducts = [];

    for (const product of products) {
      try {
        const properties = product.properties_data ? 
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        // –ò—â–µ–º –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É
        const wholesalePriceFields = [
          '–¶–µ–Ω–∞ –æ–ø—Ç',
          '–¶–µ–Ω–∞_–æ–ø—Ç',
          '–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞',
          '–û–ø—Ç–æ–≤–∞—è_—Ü–µ–Ω–∞',
          'Wholesale Price',
          '–û–ø—Ç',
          '–û–ø—Ç_—Ü–µ–Ω–∞',
          'Wholesale',
          '–û–ø—Ç–æ–≤–∞—è',
          '–û–ø—Ç–æ–≤–∞—è_—Ü–µ–Ω–∞'
        ];

        let wholesalePrice = null;
        let wholesalePriceField = null;

        for (const field of wholesalePriceFields) {
          if (properties[field] !== undefined && properties[field] !== null) {
            wholesalePrice = properties[field];
            wholesalePriceField = field;
            break;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        const needsBasePriceFix = product.base_price === 0 || product.base_price === null;
        const needsRetailPriceFix = !properties['–†–†–¶'] && !properties['–†–†–¶ —Ü–µ–Ω–∞'] && !properties['RRP'];

        if (needsBasePriceFix || needsRetailPriceFix) {
          const updates = {};

          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
          if (needsBasePriceFix && wholesalePrice && parseFloat(wholesalePrice) > 0) {
            updates.base_price = parseFloat(wholesalePrice);
            console.log(`‚úÖ ${product.sku}: –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ ${product.base_price} ‚Üí ${wholesalePrice}`);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –†–†–¶
          if (needsRetailPriceFix && wholesalePrice && parseFloat(wholesalePrice) > 0) {
            const retailPrice = Math.round(parseFloat(wholesalePrice) * 1.3); // +30% –Ω–∞—Ü–µ–Ω–∫–∞
            properties['–†–†–¶'] = retailPrice;
            updates.properties_data = JSON.stringify(properties);
            console.log(`‚úÖ ${product.sku}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –†–†–¶ ${retailPrice} (–æ–ø—Ç: ${wholesalePrice})`);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
          if (Object.keys(updates).length > 0) {
            await prisma.product.update({
              where: { id: product.id },
              data: updates
            });

            fixedProducts.push({
              sku: product.sku,
              name: product.name,
              category: product.catalog_category.name,
              old_base_price: product.base_price,
              new_base_price: updates.base_price || product.base_price,
              wholesale_price: wholesalePrice,
              retail_price: properties['–†–†–¶'],
              wholesale_field: wholesalePriceField
            });

            fixedCount++;
          }
        }

      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error.message);
      }
    }

    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
    const fs = require('fs');
    const reportContent = [
      'SKU,–ù–∞–∑–≤–∞–Ω–∏–µ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–°—Ç–∞—Ä–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞,–ù–æ–≤–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞,–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞,–†–†–¶,–ü–æ–ª–µ –æ–ø—Ç–æ–≤–æ–π —Ü–µ–Ω—ã',
      ...fixedProducts.map(product => [
        product.sku,
        `"${product.name}"`,
        `"${product.category}"`,
        product.old_base_price || '',
        product.new_base_price || '',
        product.wholesale_price || '',
        product.retail_price || '',
        product.wholesale_field || ''
      ].join(','))
    ].join('\n');

    const fileName = `price_fixes_${new Date().toISOString().split('T')[0]}.csv`;
    fs.writeFileSync(fileName, reportContent, 'utf8');
    console.log(`üìÑ –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = {};
    fixedProducts.forEach(product => {
      if (!categoryStats[product.category]) {
        categoryStats[product.category] = 0;
      }
      categoryStats[product.category]++;
    });

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.keys(categoryStats).forEach(category => {
      console.log(`  ${category}: ${categoryStats[category]} —Ç–æ–≤–∞—Ä–æ–≤`);
    });

    return fixedProducts;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixPrices()
  .then(products => {
    console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤.`);
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
