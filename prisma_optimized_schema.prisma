// ============================================
// ОПТИМИЗИРОВАННАЯ PRISMA СХЕМА DOMEO
// ============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Изменено с SQLite на PostgreSQL
  url      = env("DATABASE_URL")
}

// ============================================
// ОПТИМИЗИРОВАННЫЕ МОДЕЛИ
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password_hash String
  first_name    String
  last_name     String
  middle_name   String?
  role          String    @default("admin")
  is_active     Boolean   @default(true)
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([is_active])
}

model Client {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  middleName    String?
  phone         String
  address       String
  objectId      String
  customFields  Json     @default("{}")  // Изменено с String на Json
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Связи с документами
  documents     Document[]

  @@map("clients")
  @@index([phone])
  @@index([isActive])
  @@index([firstName, lastName])
}

model CatalogCategory {
  id                   String                       @id @default(cuid())
  name                 String
  parent_id            String?
  level                Int                          @default(0)
  path                 String
  sort_order           Int                          @default(0)
  is_active            Boolean                      @default(true)
  
  // Кэшированные счетчики (обновляются триггерами)
  direct_products_count Int                         @default(0)
  total_products_count  Int                         @default(0)
  
  created_at           DateTime                     @default(now())
  updated_at           DateTime                     @updatedAt
  
  parent               CatalogCategory?             @relation("CatalogHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  subcategories        CatalogCategory[]            @relation("CatalogHierarchy")
  property_assignments CategoryPropertyAssignment[]
  export_settings      ExportSetting[]
  import_templates     ImportTemplate[]
  products             Product[]

  @@index([parent_id])
  @@index([path])
  @@index([level])
  @@index([is_active])
  @@index([sort_order])
  @@map("catalog_categories")
}

model ProductProperty {
  id                   String                       @id @default(cuid())
  name                 String                       @unique
  type                 String
  description          String?
  options              Json?                        // Изменено с String на Json
  is_required          Boolean                      @default(false)
  is_active            Boolean                      @default(true)
  created_at           DateTime                     @default(now())
  updated_at           DateTime                     @updatedAt
  category_assignments CategoryPropertyAssignment[]

  @@map("product_properties")
  @@index([name])
  @@index([is_active])
}

model CategoryPropertyAssignment {
  id                  String          @id @default(cuid())
  catalog_category_id String
  product_property_id String
  is_required         Boolean         @default(false)
  is_for_calculator   Boolean         @default(false)
  is_for_export       Boolean         @default(false)
  sort_order          Int             @default(0)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  product_property    ProductProperty @relation(fields: [product_property_id], references: [id], onDelete: Cascade)
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@unique([catalog_category_id, product_property_id])
  @@index([catalog_category_id])
  @@index([product_property_id])
  @@map("category_property_assignments")
}

// ============================================
// ОПТИМИЗИРОВАННАЯ МОДЕЛЬ ТОВАРОВ
// ============================================

model Product {
  id                  String          @id @default(cuid())
  catalog_category_id String
  sku                 String          @unique
  name                String
  description         String?
  brand               String?
  model               String?
  series              String?
  
  // Ценообразование
  base_price          Decimal         @db.Decimal(10, 2)
  currency            String          @default("RUB")
  
  // Склад
  stock_quantity      Int             @default(0)
  min_order_qty       Int             @default(1)
  
  // Физические характеристики (нормализованные)
  weight_kg           Decimal?        @db.Decimal(8, 3)
  width_mm            Int?
  height_mm           Int?
  depth_mm            Int?
  
  // Дополнительные данные (только для сложных случаев)
  specifications      Json            @default("{}")
  tags                Json            @default("[]")
  
  // Статусы
  is_active           Boolean         @default(true)
  is_featured         Boolean         @default(false)
  
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)
  images              ProductImage[]
  properties          ProductPropertyValue[]
  document_items      DocumentItem[]

  @@map("products")
  @@index([catalog_category_id])
  @@index([is_active])
  @@index([sku])
  @@index([brand])
  @@index([model])
  @@index([base_price])
  @@index([width_mm, height_mm])
  @@index([catalog_category_id, brand, model, width_mm, height_mm])
}

// ============================================
// НОРМАЛИЗОВАННАЯ ТАБЛИЦА СВОЙСТВ ТОВАРОВ
// ============================================

model ProductPropertyValue {
  id              String   @id @default(cuid())
  product_id      String
  property_name   String
  property_value  String
  property_type   String   @default("text") // text, number, boolean, date
  sort_order      Int      @default(0)
  created_at      DateTime @default(now())
  
  product         Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, property_name])
  @@index([product_id])
  @@index([property_name])
  @@index([property_value])
  @@index([product_id, property_name, property_value])
  @@map("product_property_values")
}

model ProductImage {
  id            String   @id @default(cuid())
  product_id    String
  filename      String
  original_name String
  url           String
  alt_text      String?
  width         Int?
  height        Int?
  file_size     Int?
  mime_type     String
  is_primary    Boolean  @default(false)
  sort_order    Int      @default(0)
  created_at    DateTime @default(now())
  product       Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("product_images")
  @@index([product_id])
  @@index([is_primary])
  @@index([sort_order])
}

// ============================================
// УНИВЕРСАЛЬНАЯ СИСТЕМА ДОКУМЕНТОВ
// ============================================

model Document {
  id           String    @id @default(cuid())
  client_id    String
  type         String    // quote, invoice, order, supplier_order
  number       String?   @unique
  status       String    @default("draft")
  
  // Даты
  document_date DateTime @default(now())
  valid_until  DateTime?
  due_date     DateTime?
  
  // Финансы
  subtotal     Decimal   @default(0) @db.Decimal(12, 2)
  tax_amount   Decimal   @default(0) @db.Decimal(12, 2)
  total_amount Decimal   @default(0) @db.Decimal(12, 2)
  currency     String    @default("RUB")
  
  // Связи между документами
  parent_document_id String?
  
  // Метаданные
  notes        String?
  terms        String?
  created_by   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  client       Client         @relation(fields: [client_id], references: [id], onDelete: Cascade)
  parent_document Document?    @relation("DocumentHierarchy", fields: [parent_document_id], references: [id])
  child_documents Document[]   @relation("DocumentHierarchy")
  items        DocumentItem[]

  @@map("documents")
  @@index([client_id])
  @@index([type])
  @@index([status])
  @@index([document_date])
  @@index([number])
  @@index([parent_document_id])
}

model DocumentItem {
  id          String   @id @default(cuid())
  document_id String
  product_id  String
  quantity    Int
  unit_price  Decimal  @db.Decimal(10, 2)
  total_price Decimal  @db.Decimal(10, 2)
  notes       String?
  created_at  DateTime @default(now())
  
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id])

  @@map("document_items")
  @@index([document_id])
  @@index([product_id])
}

// ============================================
// СИСТЕМА ИМПОРТА И ЭКСПОРТА
// ============================================

model ImportTemplate {
  id                  String          @id @default(cuid())
  catalog_category_id String          @unique
  name                String
  description         String?
  required_fields     Json            @default("[]")
  calculator_fields   Json            @default("[]")
  export_fields       Json            @default("[]")
  template_config     Json?
  field_mappings      Json?
  validation_rules    Json?
  is_active           Boolean         @default(true)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)
  import_history      ImportHistory[]

  @@index([catalog_category_id])
  @@map("import_templates")
}

model ExportSetting {
  id                  String          @id @default(cuid())
  catalog_category_id String
  export_type         String
  fields_config       Json            @default("[]")
  display_config      Json            @default("{}")
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@unique([catalog_category_id, export_type])
  @@map("export_settings")
}

model ImportHistory {
  id                  String   @id @default(cuid())
  template_id         String?
  catalog_category_id String
  filename            String
  file_size           Int?
  imported_count      Int      @default(0)
  error_count         Int      @default(0)
  status              String   @default("pending")
  errors              Json     @default("[]")
  import_data         Json?
  created_at          DateTime @default(now())

  template ImportTemplate? @relation(fields: [template_id], references: [id])

  @@index([template_id])
  @@index([catalog_category_id])
  @@index([created_at])
  @@map("import_history")
}

// ============================================
// СИСТЕМА КОНСТРУКТОРА И СТРАНИЦ
// ============================================

model FrontendCategory {
  id                   String   @id @default(cuid())
  name                 String
  slug                 String   @unique
  description          String?
  icon                 String?
  catalog_category_ids Json     @default("[]")
  display_config       Json     @default("{}")
  property_mapping     Json?
  photo_mapping        Json?
  photo_data           Json?
  is_active            Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@index([slug])
  @@index([is_active])
  @@map("frontend_categories")
}

model ConstructorConfig {
  id          String   @id @default(cuid())
  name        String
  description String?
  config      Json
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("constructor_configs")
}

model Page {
  id          String    @id @default(cuid())
  title       String
  description String    @default("")
  url         String    @unique
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  elements    PageElement[]

  @@map("pages")
  @@index([url])
  @@index([isPublished])
}

model PageElement {
  id        String   @id @default(cuid())
  type      String
  props     Json     @default("{}")
  position  Json     @default("{}")
  size      Json     @default("{}")
  zIndex    Int      @default(0)
  parentId  String?
  
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_elements")
  @@index([pageId])
  @@index([parentId])
}

// ============================================
// СИСТЕМНЫЕ ТАБЛИЦЫ
// ============================================

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("system_settings")
  @@index([key])
}

model Notification {
  id         String   @id @default(cuid())
  user_id    String
  type       String
  title      String
  message    String
  is_read    Boolean  @default(false)
  data       Json?
  created_at DateTime @default(now())
  
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([user_id])
  @@index([is_read])
  @@index([created_at])
}
