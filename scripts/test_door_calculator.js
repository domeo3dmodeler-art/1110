const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDoorCalculator() {
    console.log('üßÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –î–í–ï–†–ï–ô');
    console.log('===================================');
    console.log('');

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        console.log('üì¶ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –¢–û–í–ê–†–û–í:');
        console.log('-------------------------------');
        
        const testProducts = await prisma.product.findMany({
            where: {
                sku: {
                    startsWith: 'test_door_'
                }
            },
            select: {
                id: true,
                sku: true,
                name: true,
                base_price: true,
                properties_data: true
            }
        });

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${testProducts.length}`);
        console.log('');

        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        console.log('üßÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:');
        console.log('----------------------------------------');
        
        const testScenarios = [
            {
                name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ–ª—ã–µ –¥–≤–µ—Ä–∏ 800x2000',
                filters: {
                    style: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
                    color: '–ë–µ–ª—ã–π',
                    width: '800',
                    height: '2000'
                }
            },
            {
                name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥—É–±–æ–≤—ã–µ –¥–≤–µ—Ä–∏ 700x2000',
                filters: {
                    style: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è',
                    color: '–î—É–±',
                    width: '700',
                    height: '2000'
                }
            },
            {
                name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä—ã–µ –¥–≤–µ—Ä–∏ 900x2100',
                filters: {
                    style: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
                    color: '–°–µ—Ä—ã–π',
                    width: '900',
                    height: '2100'
                }
            },
            {
                name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ—Ä–µ—Ö–æ–≤—ã–µ –¥–≤–µ—Ä–∏ 600x2000',
                filters: {
                    style: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è',
                    color: '–û—Ä–µ—Ö',
                    width: '600',
                    height: '2000'
                }
            },
            {
                name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ—Ä–Ω—ã–µ –¥–≤–µ—Ä–∏ 800x2000',
                filters: {
                    style: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
                    color: '–ß–µ—Ä–Ω—ã–π',
                    width: '800',
                    height: '2000'
                }
            }
        ];

        testScenarios.forEach((scenario, index) => {
            console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π ${index + 1}: ${scenario.name}`);
            console.log('–§–∏–ª—å—Ç—Ä—ã:');
            Object.entries(scenario.filters).forEach(([key, value]) => {
                console.log(`   ${key}: ${value}`);
            });

            // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã
            const matchingProducts = testProducts.filter(product => {
                try {
                    const properties = JSON.parse(product.properties_data);
                    
                    return (
                        properties['Domeo_–°—Ç–∏–ª—å Web'] === scenario.filters.style &&
                        properties['Domeo_–¶–≤–µ—Ç'] === scenario.filters.color &&
                        properties['–®–∏—Ä–∏–Ω–∞/–º–º'] === scenario.filters.width &&
                        properties['–í—ã—Å–æ—Ç–∞/–º–º'] === scenario.filters.height
                    );
                } catch (error) {
                    return false;
                }
            });

            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ ${matchingProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            
            if (matchingProducts.length > 0) {
                matchingProducts.forEach((product, productIndex) => {
                    console.log(`   ${productIndex + 1}. ${product.name} (${product.sku})`);
                    console.log(`      –¶–µ–Ω–∞: ${product.base_price} —Ä—É–±.`);
                    
                    try {
                        const properties = JSON.parse(product.properties_data);
                        const price = properties['–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'];
                        if (price) {
                            console.log(`      –¶–µ–Ω–∞ –†–†–¶: ${price} —Ä—É–±.`);
                        }
                    } catch (error) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    }
                });
            } else {
                console.log('   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        });

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        console.log('\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
        console.log('-----------------------------------');
        
        const performanceTests = [
            {
                name: '–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∏–ª—é',
                query: async () => {
                    return await prisma.product.findMany({
                        where: {
                            properties_data: {
                                contains: '"Domeo_–°—Ç–∏–ª—å Web":"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è"'
                            }
                        },
                        take: 10
                    });
                }
            },
            {
                name: '–ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É',
                query: async () => {
                    return await prisma.product.findMany({
                        where: {
                            properties_data: {
                                contains: '"Domeo_–¶–≤–µ—Ç":"–ë–µ–ª—ã–π"'
                            }
                        },
                        take: 10
                    });
                }
            },
            {
                name: '–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É',
                query: async () => {
                    return await prisma.product.findMany({
                        where: {
                            properties_data: {
                                contains: '"–®–∏—Ä–∏–Ω–∞/–º–º":"800"'
                            }
                        },
                        take: 10
                    });
                }
            },
            {
                name: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
                query: async () => {
                    return await prisma.product.findMany({
                        where: {
                            AND: [
                                {
                                    properties_data: {
                                        contains: '"Domeo_–°—Ç–∏–ª—å Web":"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è"'
                                    }
                                },
                                {
                                    properties_data: {
                                        contains: '"Domeo_–¶–≤–µ—Ç":"–ë–µ–ª—ã–π"'
                                    }
                                },
                                {
                                    properties_data: {
                                        contains: '"–®–∏—Ä–∏–Ω–∞/–º–º":"800"'
                                    }
                                }
                            ]
                        },
                        take: 10
                    });
                }
            }
        ];

        for (const test of performanceTests) {
            const startTime = Date.now();
            const result = await test.query();
            const endTime = Date.now();
            const duration = endTime - startTime;
            
            console.log(`üìä ${test.name}:`);
            console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} –º—Å`);
            console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.length}`);
            console.log('');
        }

        // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤–æ–π—Å—Ç–≤
        console.log('üìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–í–û–ô–°–¢–í:');
        console.log('-----------------------------');
        
        if (testProducts.length > 0) {
            const firstProduct = testProducts[0];
            try {
                const properties = JSON.parse(firstProduct.properties_data);
                const propertyKeys = Object.keys(properties);
                
                console.log(`üì¶ –¢–æ–≤–∞—Ä: ${firstProduct.name}`);
                console.log(`üìä –í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: ${propertyKeys.length}`);
                console.log('');
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                const calculatorProps = [];
                const priceProps = [];
                const dimensionProps = [];
                const otherProps = [];
                
                propertyKeys.forEach(key => {
                    const value = properties[key];
                    
                    if (key.includes('–°—Ç–∏–ª—å') || key.includes('–¶–≤–µ—Ç') || key.includes('–¢–∏–ø')) {
                        calculatorProps.push({ key, value });
                    } else if (key.includes('–¶–µ–Ω–∞') || key.includes('–°—Ç–æ–∏–º–æ—Å—Ç—å')) {
                        priceProps.push({ key, value });
                    } else if (key.includes('–º–º') || key.includes('–®–∏—Ä–∏–Ω–∞') || key.includes('–í—ã—Å–æ—Ç–∞')) {
                        dimensionProps.push({ key, value });
                    } else {
                        otherProps.push({ key, value });
                    }
                });
                
                console.log('üßÆ –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:');
                calculatorProps.forEach(prop => {
                    console.log(`   ${prop.key}: ${prop.value}`);
                });
                
                console.log('\nüí∞ –¶–µ–Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:');
                priceProps.forEach(prop => {
                    console.log(`   ${prop.key}: ${prop.value}`);
                });
                
                console.log('\nüìè –†–∞–∑–º–µ—Ä–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:');
                dimensionProps.forEach(prop => {
                    console.log(`   ${prop.key}: ${prop.value}`);
                });
                
                console.log('\nüìã –ü—Ä–æ—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:');
                otherProps.slice(0, 5).forEach(prop => {
                    console.log(`   ${prop.key}: ${prop.value}`);
                });
                if (otherProps.length > 5) {
                    console.log(`   ... –∏ –µ—â–µ ${otherProps.length - 5} —Å–≤–æ–π—Å—Ç–≤`);
                }
                
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–æ–π—Å—Ç–≤: ${error.message}`);
            }
        }

        // 5. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:');
        console.log('==================================================');
        console.log('');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:');
        console.log(`1. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: ${testScenarios.length} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤`);
        console.log(`2. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: ${performanceTests.length} —Ç–µ—Å—Ç–æ–≤`);
        console.log(`3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–æ–π—Å—Ç–≤: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
        console.log(`4. –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        console.log('');
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   –¢–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${testProducts.length}`);
        console.log(`   –°–≤–æ–π—Å—Ç–≤ –Ω–∞ —Ç–æ–≤–∞—Ä: 24`);
        console.log(`   –°–≤–æ–π—Å—Ç–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: 8`);
        console.log(`   –¶–µ–Ω–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤: 2`);
        console.log(`   –†–∞–∑–º–µ—Ä–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤: 3`);
        console.log('');
        
        console.log('üéâ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –î–í–ï–†–ï–ô –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
        console.log('–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
testDoorCalculator();
