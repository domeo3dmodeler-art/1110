const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testFullImportCycle() {
  try {
    console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ò–ú–ü–û–†–¢–ê –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ö–û–î–ò–†–û–í–ö–û–ô ===');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –®–ê–ë–õ–û–ù–ê:');
    const template = await prisma.importTemplate.findFirst({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    
    if (template) {
      console.log(`  ‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: ${template.id}`);
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: "${template.name}"`);
      
      const fields = JSON.parse(template.required_fields || '[]');
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: ${fields.length}`);
      console.log('  –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π:');
      fields.slice(0, 5).forEach((field, i) => {
        console.log(`    ${i + 1}: "${field}"`);
        const hasCorrupted = field.includes('?');
        console.log(`       –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ: ${hasCorrupted}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      const corruptedFields = fields.filter(field => field.includes('?'));
      if (corruptedFields.length > 0) {
        console.log(`  ‚ùå –ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: ${corruptedFields.length}`);
        corruptedFields.forEach(field => {
          console.log(`    - "${field}"`);
        });
      } else {
        console.log('  ‚úÖ –í—Å–µ –ø–æ–ª—è –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É');
      }
    } else {
      console.log('  ‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint
    console.log('\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API:');
    try {
      const response = await fetch('http://localhost:3000/api/admin/templates?catalogCategoryId=cmg50xcgs001cv7mn0tdyk1wo');
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.template) {
          console.log('  ‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
          console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ API: ${data.template.requiredFields.length}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ API –æ—Ç–≤–µ—Ç–µ
          const apiCorruptedFields = data.template.requiredFields.filter(field => field.includes('?'));
          if (apiCorruptedFields.length > 0) {
            console.log(`  ‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: ${apiCorruptedFields.length}`);
          } else {
            console.log('  ‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π');
          }
        } else {
          console.log('  ‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É:', data.error);
        }
      } else {
        console.log(`  ‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å: ${response.status}`);
      }
    } catch (error) {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    console.log('\nüì• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê:');
    try {
      const response = await fetch('http://localhost:3000/api/admin/templates/download?catalogCategoryId=cmg50xcgs001cv7mn0tdyk1wo');
      if (response.ok) {
        console.log('  ‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è');
        console.log(`  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${response.headers.get('content-length')} –±–∞–π—Ç`);
        console.log(`  Content-Type: ${response.headers.get('content-type')}`);
      } else {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${response.status}`);
      }
    } catch (error) {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error.message);
    }
    
    console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFullImportCycle();
