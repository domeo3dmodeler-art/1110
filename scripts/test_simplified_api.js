const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function testSimplifiedAPI() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ì–û API –ò–ú–ü–û–†–¢–ê');
    console.log('=========================================');
    console.log('');

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        console.log('üìÇ –ü–û–ò–°–ö –ö–ê–¢–ï–ì–û–†–ò–ò:');
        console.log('-------------------');
        
        const doorsCategory = await prisma.catalogCategory.findFirst({
            where: {
                name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
            }
        });

        if (!doorsCategory) {
            console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${doorsCategory.name}`);
        console.log(`   ID: ${doorsCategory.id}`);
        console.log('');

        // 2. –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª
        console.log('üìä –ß–¢–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê:');
        console.log('---------------------------');
        
        const testFilepath = path.join(__dirname, '..', 'test_files', 'test_doors_import.xlsx');
        
        if (!fs.existsSync(testFilepath)) {
            console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', testFilepath);
            return;
        }

        const fileBuffer = fs.readFileSync(testFilepath);
        console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${testFilepath}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${fileBuffer.length} –±–∞–π—Ç`);
        console.log('');

        // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        console.log('üîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ú–ü–û–†–¢–ê:');
        console.log('---------------------');
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        const { SimplifiedProductImportService } = require('../app/lib/services/simplified-product-import.service');
        
        const importService = new SimplifiedProductImportService();
        
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞...');
        const result = await importService.importFromExcel(
            fileBuffer,
            'test_doors_import.xlsx',
            doorsCategory.id
        );

        console.log('');
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
        console.log('----------------------');
        console.log(`‚úÖ –£—Å–ø–µ—Ö: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
        console.log(`üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.imported}`);
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${result.warnings.length}`);
        console.log('');

        if (result.errors.length > 0) {
            console.log('‚ùå –û–®–ò–ë–ö–ò:');
            result.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
            });
            console.log('');
        }

        if (result.warnings.length > 0) {
            console.log('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
            result.warnings.forEach((warning, index) => {
                console.log(`   ${index + 1}. ${warning}`);
            });
            console.log('');
        }

        if (result.products.length > 0) {
            console.log('üõçÔ∏è –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –¢–û–í–ê–†–´:');
            console.log('----------------------------');
            result.products.forEach((product, index) => {
                console.log(`${index + 1}. ${product.name} (SKU: ${product.sku})`);
                console.log(`   ID: ${product.id}`);
                console.log(`   –¶–µ–Ω–∞: ${product.base_price} —Ä—É–±.`);
                console.log(`   –°–≤–æ–π—Å—Ç–≤: ${product.properties_count}`);
                console.log('');
            });
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
        console.log('-------------------------');
        
        const importedProducts = await prisma.product.findMany({
            where: {
                sku: {
                    startsWith: 'test_door_'
                }
            },
            select: {
                id: true,
                sku: true,
                name: true,
                base_price: true,
                properties_data: true,
                created_at: true,
                updated_at: true
            },
            orderBy: {
                created_at: 'desc'
            }
        });

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ SKU: ${importedProducts.length}`);
        console.log('');

        importedProducts.forEach((product, index) => {
            console.log(`${index + 1}. ${product.name} (SKU: ${product.sku})`);
            console.log(`   ID: ${product.id}`);
            console.log(`   –¶–µ–Ω–∞: ${product.base_price} —Ä—É–±.`);
            console.log(`   –°–æ–∑–¥–∞–Ω: ${product.created_at.toLocaleString()}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${product.updated_at.toLocaleString()}`);
            
            try {
                const properties = JSON.parse(product.properties_data);
                const propertyKeys = Object.keys(properties);
                console.log(`   –°–≤–æ–π—Å—Ç–≤: ${propertyKeys.length}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                const keyProperties = [
                    'Domeo_–°—Ç–∏–ª—å Web',
                    'Domeo_–¶–≤–µ—Ç',
                    '–®–∏—Ä–∏–Ω–∞/–º–º',
                    '–í—ã—Å–æ—Ç–∞/–º–º',
                    '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'
                ];
                
                console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:`);
                keyProperties.forEach(key => {
                    if (properties[key]) {
                        console.log(`      ${key}: ${properties[key]}`);
                    }
                });
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤: ${error.message}`);
            }
            console.log('');
        });

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('üìä –ü–†–û–í–ï–†–ö–ê –°–ß–ï–¢–ß–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò:');
        console.log('--------------------------------');
        
        const updatedCategory = await prisma.catalogCategory.findUnique({
            where: { id: doorsCategory.id }
        });

        console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${updatedCategory.name}`);
        console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${updatedCategory.products_count}`);
        console.log(`üïí –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${updatedCategory.updated_at.toLocaleString()}`);
        console.log('');

        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–º–ø–æ—Ä—Ç–∞
        console.log('üìã –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –ò–ú–ü–û–†–¢–ê:');
        console.log('-----------------------------');
        
        const importHistory = await prisma.importHistory.findMany({
            where: {
                filename: 'test_doors_import.xlsx'
            },
            orderBy: {
                created_at: 'desc'
            },
            take: 1
        });

        if (importHistory.length > 0) {
            const history = importHistory[0];
            console.log(`üìÑ –§–∞–π–ª: ${history.filename}`);
            console.log(`üìÖ –î–∞—Ç–∞: ${history.created_at.toLocaleString()}`);
            console.log(`üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${history.imported_count}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${history.error_count}`);
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${history.status}`);
            console.log('');
        }

        // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        console.log('üßÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:');
        console.log('------------------------------');
        
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        const calculatorTestProducts = await prisma.product.findMany({
            where: {
                sku: {
                    startsWith: 'test_door_'
                },
                properties_data: {
                    contains: 'Domeo_–°—Ç–∏–ª—å Web'
                }
            },
            take: 3
        });

        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${calculatorTestProducts.length}`);
        console.log('');

        calculatorTestProducts.forEach((product, index) => {
            console.log(`–¢–µ—Å—Ç ${index + 1}: ${product.name}`);
            
            try {
                const properties = JSON.parse(product.properties_data);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
                const style = properties['Domeo_–°—Ç–∏–ª—å Web'];
                const color = properties['Domeo_–¶–≤–µ—Ç'];
                const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'];
                const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'];
                const price = properties['–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'];
                
                console.log(`   –°—Ç–∏–ª—å: ${style}`);
                console.log(`   –¶–≤–µ—Ç: ${color}`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${width}x${height} –º–º`);
                console.log(`   –¶–µ–Ω–∞: ${price} —Ä—É–±.`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—Å—Ç—å
                const requiredProps = [style, color, width, height, price];
                const missingProps = requiredProps.filter(prop => !prop);
                
                if (missingProps.length === 0) {
                    console.log(`   ‚úÖ –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
                } else {
                    console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞: ${missingProps.length}`);
                }
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–π—Å—Ç–≤: ${error.message}`);
            }
            console.log('');
        });

        // 8. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('=====================================');
        console.log('');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:');
        console.log(`1. –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: ${importedProducts.length > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: ${updatedCategory.products_count > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`4. –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é: ${importHistory.length > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`5. –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${calculatorTestProducts.length > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log('');
        
        if (result.success && importedProducts.length > 0) {
            console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
            console.log('–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        } else {
            console.log('‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û');
            console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.');
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testSimplifiedAPI();
