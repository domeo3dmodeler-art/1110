const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSimplifiedImport() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ò–ú–ü–û–†–¢–ê');
    console.log('============================================');
    console.log('');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        console.log('üìã –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –®–ê–ë–õ–û–ù–ê:');
        console.log('----------------------------------');
        
        const doorsTemplate = await prisma.importTemplate.findFirst({
            where: {
                name: {
                    contains: '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
                }
            },
            include: {
                catalog_category: true
            }
        });

        if (doorsTemplate) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: ${doorsTemplate.name}`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${doorsTemplate.catalog_category.name}`);
            console.log(`   ID: ${doorsTemplate.id}`);
            console.log(`   –ú–∞–ø–ø–∏–Ω–≥ —É–±—Ä–∞–Ω: ${doorsTemplate.field_mappings === null ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log('');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
            try {
                const requiredFields = JSON.parse(doorsTemplate.required_fields);
                const calculatorFields = JSON.parse(doorsTemplate.calculator_fields);
                const exportFields = JSON.parse(doorsTemplate.export_fields);
                const templateConfig = JSON.parse(doorsTemplate.template_config);

                console.log(`   üìù –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (${requiredFields.length}):`);
                requiredFields.forEach((field, index) => {
                    console.log(`      ${index + 1}. ${field.displayName} (${field.dataType})`);
                });

                console.log(`   üßÆ –ü–æ–ª—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (${calculatorFields.length}):`);
                calculatorFields.forEach((field, index) => {
                    console.log(`      ${index + 1}. ${field.displayName} (${field.dataType})`);
                });

                console.log(`   üì§ –ü–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (${exportFields.length}):`);
                exportFields.forEach((field, index) => {
                    console.log(`      ${index + 1}. ${field.displayName} (${field.dataType})`);
                });

                console.log(`   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞:`);
                console.log(`      –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π: ${templateConfig.simplified ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥: ${templateConfig.direct_mapping ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è: ${templateConfig.excel_headers_as_fields ? '–î–∞' : '–ù–µ—Ç'}`);

            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª–µ–π: ${error.message}`);
            }

        } else {
            console.log('‚ùå –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        console.log('');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
        console.log('üõçÔ∏è –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í –°–û –°–í–û–ô–°–¢–í–ê–ú–ò:');
        console.log('-----------------------------------');
        
        const productsWithProperties = await prisma.product.findMany({
            where: {
                properties_data: {
                    not: '{}'
                }
            },
            select: {
                id: true,
                name: true,
                sku: true,
                properties_data: true,
                base_price: true,
                catalog_category: {
                    select: {
                        name: true
                    }
                }
            },
            take: 3
        });

        console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: ${productsWithProperties.length}`);
        console.log('');

        productsWithProperties.forEach((product, index) => {
            console.log(`${index + 1}. ${product.name} (SKU: ${product.sku})`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.catalog_category.name}`);
            console.log(`   –¶–µ–Ω–∞: ${product.base_price} —Ä—É–±.`);
            
            try {
                const properties = JSON.parse(product.properties_data);
                const propertyKeys = Object.keys(properties);
                console.log(`   –°–≤–æ–π—Å—Ç–≤: ${propertyKeys.length}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
                const keyProperties = [
                    'Domeo_–°—Ç–∏–ª—å Web',
                    'Domeo_–¶–≤–µ—Ç',
                    '–®–∏—Ä–∏–Ω–∞/–º–º',
                    '–í—ã—Å–æ—Ç–∞/–º–º',
                    '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'
                ];
                
                console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:`);
                keyProperties.forEach(key => {
                    if (properties[key]) {
                        console.log(`      ${key}: ${properties[key]}`);
                    }
                });
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤: ${error.message}`);
            }
            console.log('');
        });

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –£–ü–†–û–©–ï–ù–ù–û–ì–û –ò–ú–ü–û–†–¢–ê:');
        console.log('--------------------------------------------');
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Excel
        const mockHeaders = [
            '‚Ññ',
            'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
            'Domeo_–°—Ç–∏–ª—å Web',
            '–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è',
            '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
            'Domeo_–¶–≤–µ—Ç',
            '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
            '–®–∏—Ä–∏–Ω–∞/–º–º',
            '–í—ã—Å–æ—Ç–∞/–º–º',
            '–ï–¥.–∏–∑–º.',
            '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑',
            '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
            '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
            '–ö—Ä–æ–º–∫–∞',
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É',
            '–ú–æ–ª–¥–∏–Ω–≥',
            '–°—Ç–µ–∫–ª–æ',
            '–¢–æ–ª—â–∏–Ω–∞/–º–º',
            '–¶–µ–Ω–∞ –æ–ø—Ç'
        ];

        const mockRow = [
            '1',
            'DomeoDoors_Test_1',
            '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
            '–†–∞—Å–ø–∞—à–Ω–∞—è',
            '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
            'Moderno',
            '–ü–í–•',
            '–ë–µ–ª—ã–π',
            'CV –ë–µ–ª—ã–π',
            '800',
            '2000',
            '—à—Ç',
            '–ó–∞–∫–∞–∑–Ω–æ–µ',
            '45000',
            '–î–≤–µ—Ä—å –¢–µ—Å—Ç–æ–≤–∞—è',
            '–í–µ—Å—Ç–°—Ç–∞–π–ª',
            'test_door_1',
            '–ø—Ä—è–º–æ–µ',
            '–Ω–µ—Ç',
            '0',
            '–Ω–µ—Ç',
            '–Ω–µ—Ç',
            '38',
            '30000'
        ];

        console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:');
        mockHeaders.forEach((header, index) => {
            console.log(`   ${index + 1}. "${header}"`);
        });

        console.log('\nüì¶ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
        mockRow.forEach((value, index) => {
            console.log(`   ${index + 1}. ${value}`);
        });

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        console.log('\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
        const testProduct = {
            sku: mockRow[16] || 'AUTO-1', // –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            name: mockRow[14] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            properties_data: {}
        };

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
        mockHeaders.forEach((header, headerIndex) => {
            if (mockRow[headerIndex] !== undefined && mockRow[headerIndex] !== null && mockRow[headerIndex] !== '') {
                testProduct.properties_data[header] = mockRow[headerIndex];
            }
        });

        console.log(`   SKU: ${testProduct.sku}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${testProduct.name}`);
        console.log(`   –°–≤–æ–π—Å—Ç–≤: ${Object.keys(testProduct.properties_data).length}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        const calculatorProperties = [
            'Domeo_–°—Ç–∏–ª—å Web',
            'Domeo_–¶–≤–µ—Ç',
            '–®–∏—Ä–∏–Ω–∞/–º–º',
            '–í—ã—Å–æ—Ç–∞/–º–º',
            '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'
        ];

        console.log('\nüßÆ –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:');
        calculatorProperties.forEach(prop => {
            if (testProduct.properties_data[prop]) {
                console.log(`   ${prop}: ${testProduct.properties_data[prop]}`);
            }
        });

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
        console.log('\nüåê –ü–†–û–í–ï–†–ö–ê API ENDPOINT:');
        console.log('-------------------------');
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π API: /api/admin/import/simplified');
        console.log('   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:');
        console.log('   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞');
        console.log('   - –ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞');
        console.log('   - –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫');
        console.log('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã');
        console.log('   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤');

        // 5. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('---------------------------');
        console.log('');
        console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:');
        console.log('1. –£–ø—Ä–æ—â–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–≤–µ—Ä–µ–π');
        console.log('2. –£–±—Ä–∞–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥');
        console.log('3. –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel —Ç–µ–ø–µ—Ä—å = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞');
        console.log('4. –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –∏–º–ø–æ—Ä—Ç–∞');
        console.log('5. –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞');
        console.log('');
        console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API —Å —Ä–µ–∞–ª—å–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º');
        console.log('2. –û–±–Ω–æ–≤–∏—Ç—å UI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API');
        console.log('3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —à–∞–±–ª–æ–Ω–∞–º');
        console.log('4. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
        console.log('');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testSimplifiedImport();
