const { PrismaClient } = require('@prisma/client');
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestSimplifiedImportService {
    async importFromExcel(fileBuffer, filename, catalogCategoryId) {
        console.log('üöÄ –¢–ï–°–¢–û–í–´–ô –ò–ú–ü–û–†–¢ –¢–û–í–ê–†–û–í');
        console.log('============================');
        console.log(`üìÅ –§–∞–π–ª: ${filename}`);
        console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${catalogCategoryId}`);
        
        try {
            // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            
            if (data.length === 0) {
                return {
                    success: false,
                    message: '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö',
                    imported: 0,
                    updated: 0,
                    errors: ['–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö'],
                    warnings: [],
                    products: []
                };
            }

            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–Ω–∏ –∂–µ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞)
            const headers = data[0];
            const rows = data.slice(1).filter(row => row.length > 0);
            
            console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ (${headers.length}):`);
            headers.forEach((header, index) => {
                console.log(`   ${index + 1}. "${header}"`);
            });
            
            console.log(`üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${rows.length}`);

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const catalogCategory = await prisma.catalogCategory.findUnique({
                where: { id: catalogCategoryId }
            });
            
            if (!catalogCategory) {
                return {
                    success: false,
                    message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    imported: 0,
                    updated: 0,
                    errors: ['–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'],
                    warnings: [],
                    products: []
                };
            }

            console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${catalogCategory.name}`);

            // –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
            const products = [];
            const errors = [];
            const warnings = [];

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                
                if (row.length === 0 || row.every(cell => !cell)) {
                    continue;
                }

                try {
                    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                    const product = {
                        sku: '',
                        name: '',
                        catalog_category_id: catalogCategoryId,
                        properties_data: {},
                        base_price: 0,
                        currency: 'RUB',
                        stock_quantity: 0,
                        is_active: true
                    };

                    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
                    headers.forEach((header, headerIndex) => {
                        if (row[headerIndex] !== undefined && row[headerIndex] !== null && row[headerIndex] !== '') {
                            product.properties_data[header] = row[headerIndex];
                        }
                    });

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    // SKU - –æ–±—ã—á–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ C (–∏–Ω–¥–µ–∫—Å 2) –∏–ª–∏ –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                    if (row[16]) { // –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        product.sku = row[16].toString().trim();
                    } else if (row[2]) { // –ö–æ–ª–æ–Ω–∫–∞ C
                        product.sku = row[2].toString().trim();
                    } else {
                        product.sku = `AUTO-${i + 1}`;
                        warnings.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: SKU —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
                    }

                    // –ù–∞–∑–≤–∞–Ω–∏–µ - –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                    if (row[14]) { // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        product.name = row[14].toString().trim();
                    } else if (row[3]) { // –ö–æ–ª–æ–Ω–∫–∞ D
                        product.name = row[3].toString().trim();
                    } else {
                        product.name = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                        warnings.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ`);
                    }

                    // –ò—â–µ–º —Ü–µ–Ω—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                    const priceHeaders = headers.filter(h => 
                        h && h.toLowerCase().includes('—Ü–µ–Ω–∞')
                    );
                    
                    if (priceHeaders.length > 0) {
                        const priceHeader = priceHeaders[0];
                        const priceIndex = headers.indexOf(priceHeader);
                        const priceValue = row[priceIndex];
                        
                        if (priceValue) {
                            const price = parseFloat(priceValue.toString().replace(/[^\d.,]/g, '').replace(',', '.'));
                            if (!isNaN(price)) {
                                product.base_price = price;
                            } else {
                                warnings.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã "${priceValue}"`);
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if (!product.name || product.name === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
                        errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞`);
                        continue;
                    }

                    if (Object.keys(product.properties_data).length === 0) {
                        errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –¢–æ–≤–∞—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π—Å—Ç–≤`);
                        continue;
                    }

                    products.push(product);

                } catch (error) {
                    errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - ${error.message}`);
                }
            }

            console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${products.length}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
            console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.length}`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            let imported = 0;
            let updated = 0;
            const savedProducts = [];

            for (const product of products) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU
                    const existingProduct = await prisma.product.findUnique({
                        where: { sku: product.sku }
                    });

                    if (existingProduct) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                        const updatedProduct = await prisma.product.update({
                            where: { sku: product.sku },
                            data: {
                                name: product.name,
                                properties_data: JSON.stringify(product.properties_data),
                                base_price: product.base_price,
                                updated_at: new Date()
                            }
                        });
                        
                        savedProducts.push({
                            id: updatedProduct.id,
                            sku: updatedProduct.sku,
                            name: updatedProduct.name,
                            base_price: updatedProduct.base_price,
                            properties_count: Object.keys(product.properties_data).length
                        });
                        
                        updated++;
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                        const newProduct = await prisma.product.create({
                            data: {
                                sku: product.sku,
                                name: product.name,
                                catalog_category_id: product.catalog_category_id,
                                properties_data: JSON.stringify(product.properties_data),
                                base_price: product.base_price,
                                currency: product.currency,
                                stock_quantity: product.stock_quantity,
                                is_active: product.is_active
                            }
                        });
                        
                        savedProducts.push({
                            id: newProduct.id,
                            sku: newProduct.sku,
                            name: newProduct.name,
                            base_price: newProduct.base_price,
                            properties_count: Object.keys(product.properties_data).length
                        });
                        
                        imported++;
                    }
                    
                } catch (error) {
                    errors.push(`–¢–æ–≤–∞—Ä "${product.name}": –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - ${error.message}`);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const count = await prisma.product.count({
                where: { 
                    catalog_category_id: catalogCategoryId,
                    is_active: true 
                }
            });

            await prisma.catalogCategory.update({
                where: { id: catalogCategoryId },
                data: { 
                    products_count: count,
                    updated_at: new Date()
                }
            });

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
            await prisma.importHistory.create({
                data: {
                    catalog_category_id: catalogCategoryId,
                    filename: filename,
                    file_size: fileBuffer.length,
                    imported_count: imported + updated,
                    error_count: errors.length,
                    status: errors.length > 0 ? 'partial' : 'completed',
                    errors: JSON.stringify(errors),
                    import_data: JSON.stringify({
                        imported: imported,
                        updated: updated,
                        total_processed: imported + updated
                    })
                }
            });

            console.log(`üéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:`);
            console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
            console.log(`   –û—à–∏–±–æ–∫: ${errors.length}`);

            return {
                success: true,
                message: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                imported: imported,
                updated: updated,
                errors: errors,
                warnings: warnings,
                products: savedProducts
            };

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            return {
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞',
                imported: 0,
                updated: 0,
                errors: [error.message],
                warnings: [],
                products: []
            };
        }
    }
}

async function testSimplifiedAPI() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ì–û API –ò–ú–ü–û–†–¢–ê');
    console.log('=========================================');
    console.log('');

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        console.log('üìÇ –ü–û–ò–°–ö –ö–ê–¢–ï–ì–û–†–ò–ò:');
        console.log('-------------------');
        
        const doorsCategory = await prisma.catalogCategory.findFirst({
            where: {
                name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
            }
        });

        if (!doorsCategory) {
            console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${doorsCategory.name}`);
        console.log(`   ID: ${doorsCategory.id}`);
        console.log('');

        // 2. –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª
        console.log('üìä –ß–¢–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê:');
        console.log('---------------------------');
        
        const testFilepath = path.join(__dirname, '..', 'test_files', 'test_doors_import.xlsx');
        
        if (!fs.existsSync(testFilepath)) {
            console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', testFilepath);
            return;
        }

        const fileBuffer = fs.readFileSync(testFilepath);
        console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${testFilepath}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${fileBuffer.length} –±–∞–π—Ç`);
        console.log('');

        // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
        console.log('üîÑ –ó–ê–ü–£–°–ö –ò–ú–ü–û–†–¢–ê:');
        console.log('------------------');
        
        const importService = new TestSimplifiedImportService();
        const result = await importService.importFromExcel(
            fileBuffer,
            'test_doors_import.xlsx',
            doorsCategory.id
        );

        console.log('');
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
        console.log('----------------------');
        console.log(`‚úÖ –£—Å–ø–µ—Ö: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
        console.log(`üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.imported}`);
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${result.warnings.length}`);
        console.log('');

        if (result.errors.length > 0) {
            console.log('‚ùå –û–®–ò–ë–ö–ò:');
            result.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
            });
            console.log('');
        }

        if (result.warnings.length > 0) {
            console.log('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
            result.warnings.forEach((warning, index) => {
                console.log(`   ${index + 1}. ${warning}`);
            });
            console.log('');
        }

        if (result.products.length > 0) {
            console.log('üõçÔ∏è –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ï –¢–û–í–ê–†–´:');
            console.log('----------------------------');
            result.products.forEach((product, index) => {
                console.log(`${index + 1}. ${product.name} (SKU: ${product.sku})`);
                console.log(`   ID: ${product.id}`);
                console.log(`   –¶–µ–Ω–∞: ${product.base_price} —Ä—É–±.`);
                console.log(`   –°–≤–æ–π—Å—Ç–≤: ${product.properties_count}`);
                console.log('');
            });
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
        console.log('-------------------------');
        
        const importedProducts = await prisma.product.findMany({
            where: {
                sku: {
                    startsWith: 'test_door_'
                }
            },
            select: {
                id: true,
                sku: true,
                name: true,
                base_price: true,
                properties_data: true,
                created_at: true,
                updated_at: true
            },
            orderBy: {
                created_at: 'desc'
            }
        });

        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ SKU: ${importedProducts.length}`);
        console.log('');

        importedProducts.forEach((product, index) => {
            console.log(`${index + 1}. ${product.name} (SKU: ${product.sku})`);
            console.log(`   ID: ${product.id}`);
            console.log(`   –¶–µ–Ω–∞: ${product.base_price} —Ä—É–±.`);
            console.log(`   –°–æ–∑–¥–∞–Ω: ${product.created_at.toLocaleString()}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${product.updated_at.toLocaleString()}`);
            
            try {
                const properties = JSON.parse(product.properties_data);
                const propertyKeys = Object.keys(properties);
                console.log(`   –°–≤–æ–π—Å—Ç–≤: ${propertyKeys.length}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                const keyProperties = [
                    'Domeo_–°—Ç–∏–ª—å Web',
                    'Domeo_–¶–≤–µ—Ç',
                    '–®–∏—Ä–∏–Ω–∞/–º–º',
                    '–í—ã—Å–æ—Ç–∞/–º–º',
                    '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'
                ];
                
                console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:`);
                keyProperties.forEach(key => {
                    if (properties[key]) {
                        console.log(`      ${key}: ${properties[key]}`);
                    }
                });
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤: ${error.message}`);
            }
            console.log('');
        });

        // 5. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('=====================================');
        console.log('');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:');
        console.log(`1. –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: ${importedProducts.length > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–π—Å—Ç–≤: ${result.products.length > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`4. –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log('');
        
        if (result.success && importedProducts.length > 0) {
            console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
            console.log('–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
            console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞.');
        } else {
            console.log('‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û');
            console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.');
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testSimplifiedAPI();
